diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/CMakeLists.txt blackscholes/CMakeLists.txt
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/CMakeLists.txt	1969-12-31 16:00:00.000000000 -0800
+++ blackscholes/CMakeLists.txt	2021-07-29 15:33:32.157364000 -0700
@@ -0,0 +1,32 @@
+
+include_directories(
+    ${CMAKE_CURRENT_BINARY_DIR}
+    )
+
+SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -march=native -fopenmp")
+
+set(SRC_FILES "blackscholes.cpp")
+set(APP_NAME "blackscholes")
+
+execute_process(COMMAND python3 ${CMAKE_SOURCE_DIR}/configure.py 
+    ${CMAKE_SOURCE_DIR}
+    ${CMAKE_CURRENT_BINARY_DIR} 
+    ${CMAKE_CURRENT_SOURCE_DIR} ${APP_NAME} ${SRC_FILES}
+    OUTPUT_VARIABLE CREATED_FILES)
+
+string(REPLACE " " ";" CREATED_FILES ${CREATED_FILES})
+add_compile_options("-fapprox")
+foreach(DIR_NAME ${CREATED_FILES})
+    string(STRIP ${DIR_NAME} DIR_NAME)
+    set(TMP_SRC "")
+    set(EXE_NAME "${APP_NAME}_${DIR_NAME}.exe")
+    foreach (sf ${SRC_FILES})
+        list(APPEND TMP_SRC "${CMAKE_CURRENT_BINARY_DIR}/${DIR_NAME}/${sf}")
+    endforeach()
+    add_executable(${EXE_NAME} ${TMP_SRC})
+    target_link_libraries(${EXE_NAME} ${LIBAPPROX_LIB_FILE})
+    target_include_directories(${EXE_NAME} PUBLIC ${APPROX_LIB_UTIL_DIR}/)
+    set_target_properties(${EXE_NAME} PROPERTIES LINK_FLAGS "-lapprox")
+endforeach()
+
+configure_file(random_input.bin random_input.bin COPYONLY)
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/COPYRIGHT blackscholes/COPYRIGHT
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/COPYRIGHT	2021-07-27 19:39:34.006092000 -0700
+++ blackscholes/COPYRIGHT	1969-12-31 16:00:00.000000000 -0800
@@ -1 +0,0 @@
-Copyright (c) Intel Corp.
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/Makefile blackscholes/Makefile
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/Makefile	2021-07-27 19:39:33.994053000 -0700
+++ blackscholes/Makefile	1969-12-31 16:00:00.000000000 -0800
@@ -1,73 +0,0 @@
-PREFIX=${PARSECDIR}/pkgs/apps/blackscholes/inst/${PARSECPLAT}
-
-CSRC    = $(SRC)
-TARGET  = blackscholes
-M4_BASE = .
-MACROS  = c.m4.pthreads
-
-ifdef source
-	ifeq "$(source)" "simd" 
-		SRC = blackscholes.simd.c
-		CXXFLAGS += -msse3
-	endif
-else
-	SRC	= blackscholes.c
-endif
-
-ifdef version
-  ifeq "$(version)" "pthreads"
-    M4_SRC    = blackscholes.m4.cpp
-    CSRC      = $(M4_SRC)
-    MT        = -DENABLE_THREADS
-    CXXFLAGS += -pthread
-  endif
-  ifeq "$(version)" "openmp"
-    MT        = -DENABLE_OPENMP
-  endif
-  ifeq "$(version)" "tbb"
-    MT        = -DENABLE_TBB
-  endif
-else
-  MT        = 
-endif
-
-
-
-# Default build single precision version
-NCO     = -DNCO=4
-
-ifdef chk_err
-ERR     = -DERR_CHK
-endif
-
-ifdef single
-NCO = -DNCO=4
-endif
-
-ifdef size
-SZ = -DN=$(size)
-else
-SZ = -DN=960
-endif
-
-ifdef double
-NCO = -DNCO=2
-endif
-
-CXXFLAGS += $(MT) $(NCO) $(FUNC) $(ERR) $(CSRC)
-
-all: $(TARGET)
-
-$(TARGET): clean $(CSRC)
-	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(LIBS) -o $(TARGET)
-
-$(M4_SRC): $(SRC)
-	$(M4) $(M4_BASE)/$(MACROS) $< > $@
-
-clean:
-	rm -f $(TARGET) $(M4_SRC)
-
-install:
-	mkdir -p $(PREFIX)/bin
-	cp -f $(TARGET) $(PREFIX)/bin/$(TARGET)
-
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/README blackscholes/README
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/README	2021-07-27 19:39:33.968054000 -0700
+++ blackscholes/README	1969-12-31 16:00:00.000000000 -0800
@@ -1,67 +0,0 @@
-Name:  Black Scholes
-
-Description: The Black-Scholes equation is a differential equation that
-describes how, under a certain set of assumptions, the value of an option
-changes as the price of the underlying asset changes.
-
-The formula for a put option is similar. The cumulative normal distribution 
-function, CND(x), gives the probability that normally distributed random
-variable will have a value less than x. There is no closed form expression for
-this function, and as such it must be evaluated numerically. Alternatively,
-the values of this function may be pre-computed and hard-coded in the table; in
-this case, they can be obtained at runtime using table lookup. We compare both
-of these approaches in our work. The other parameters are as follows:
-S underlying asset.s current price, X the strike price, T time to the
-expiration date, r risk-less rate of return, and v stock.s volatility.
-
-Based on this formula, one can compute the option price analytically based on
-the five input parameters.  Using this analytical approach to price option,
-the limiting factor lies with the amount of floating-point calculation a
-processor can perform.
-
-Parallelization: Our parallelization algorithms is very simple: we simply price 
-multiple options in parallel using Black-Scholes formula. Each thread prices an 
-individual option. In practice financial houses price 10.s to 100.s of thousandsof options using Black-Scholes.
-
-=======================================
-Programming Languages & Libraries:
-
-C/C++ and Pthread is used to implement this benchmark.
-
-=======================================
-System requirements:
-
- 1) Intel(R) C++ Compiler: version 9.0 or higher
- 2) GNU gcc/g++: version 3.3 or higher
- 3) sed: version 4.0.9 or higher recommended.
-The minimum required memory size is 140 MBytes.
-=======================================
-Input/Output:
-The input data file of this benchmark includes an array of data of 
-options.
-
-The output benchmark will output the price of the options based on the five
-input parameters in the dataset file. 
-
-
-=======================================
-Characteristics:
-
-(1) Hotspot
-Hotspot of the benchmark includes computing the price of options using 
-black scholes formula and  the cumulative normal distribution function.
-They are implemented in BlkSchlsEqEuroNoDiv and CNDF in "bs.c" respectly.
-
-=======================================
-Revision History
-
-Date: Person-making-revision  brief-description-of-revision
-
-=======================================
-Author: Victor Lee, Mikhail Smelyanskiy
-
-Acknowledgements:
-
-References:
-[Black73] Black, Fischer, and M. Scholes. The Pricing of Options and Corporate Liabilities. Journal of Political Economy, 81:637--659, May--June 1973.
-
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/benchDescr.yaml blackscholes/benchDescr.yaml
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/benchDescr.yaml	1969-12-31 16:00:00.000000000 -0800
+++ blackscholes/benchDescr.yaml	2021-07-27 21:09:57.985829000 -0700
@@ -0,0 +1,7 @@
+blackscholes:
+    input: ["random_input.bin"]
+    cmd: '1 <input> <output>'
+    measure: 'RUN_TIME:(\d+\.\d+)'
+    metric: 'MAPE'
+    quality_pattern: 'OUTPUT_QUALITY:([0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)'
+    copy: ["random_input.bin"]
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.c blackscholes/blackscholes.c
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.c	2021-07-27 19:39:34.026058000 -0700
+++ blackscholes/blackscholes.c	1969-12-31 16:00:00.000000000 -0800
@@ -1,510 +0,0 @@
-// Copyright (c) 2007 Intel Corp.
-
-// Black-Scholes
-// Analytical method for calculating European Options
-//
-// 
-// Reference Source: Options, Futures, and Other Derivatives, 3rd Edition, Prentice 
-// Hall, John C. Hull,
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <math.h>
-#include <string.h>
-
-#ifdef ENABLE_PARSEC_HOOKS
-#include <hooks.h>
-#endif
-
-// Multi-threaded pthreads header
-#ifdef ENABLE_THREADS
-// Add the following line so that icc 9.0 is compatible with pthread lib.
-#define __thread __threadp
-MAIN_ENV
-#undef __thread
-#endif
-
-// Multi-threaded OpenMP header
-#ifdef ENABLE_OPENMP
-#include <omp.h>
-#endif
-
-#ifdef ENABLE_TBB
-#include "tbb/blocked_range.h"
-#include "tbb/parallel_for.h"
-#include "tbb/task_scheduler_init.h"
-#include "tbb/tick_count.h"
-
-using namespace std;
-using namespace tbb;
-#endif //ENABLE_TBB
-
-// Multi-threaded header for Windows
-#ifdef WIN32
-#pragma warning(disable : 4305)
-#pragma warning(disable : 4244)
-#include <windows.h>
-#endif
-
-//Precision to use for calculations
-#define fptype float
-
-#define NUM_RUNS 100
-
-typedef struct OptionData_ {
-        fptype s;          // spot price
-        fptype strike;     // strike price
-        fptype r;          // risk-free interest rate
-        fptype divq;       // dividend rate
-        fptype v;          // volatility
-        fptype t;          // time to maturity or option expiration in years 
-                           //     (1yr = 1.0, 6mos = 0.5, 3mos = 0.25, ..., etc)  
-        char OptionType;   // Option type.  "P"=PUT, "C"=CALL
-        fptype divs;       // dividend vals (not used in this test)
-        fptype DGrefval;   // DerivaGem Reference Value
-} OptionData;
-
-OptionData *data;
-fptype *prices;
-int numOptions;
-
-int    * otype;
-fptype * sptprice;
-fptype * strike;
-fptype * rate;
-fptype * volatility;
-fptype * otime;
-int numError = 0;
-int nThreads;
-
-////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////
-///////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////
-// Cumulative Normal Distribution Function
-// See Hull, Section 11.8, P.243-244
-#define inv_sqrt_2xPI 0.39894228040143270286
-
-fptype CNDF ( fptype InputX ) 
-{
-    int sign;
-
-    fptype OutputX;
-    fptype xInput;
-    fptype xNPrimeofX;
-    fptype expValues;
-    fptype xK2;
-    fptype xK2_2, xK2_3;
-    fptype xK2_4, xK2_5;
-    fptype xLocal, xLocal_1;
-    fptype xLocal_2, xLocal_3;
-
-    // Check for negative value of InputX
-    if (InputX < 0.0) {
-        InputX = -InputX;
-        sign = 1;
-    } else 
-        sign = 0;
-
-    xInput = InputX;
- 
-    // Compute NPrimeX term common to both four & six decimal accuracy calcs
-    expValues = exp(-0.5f * InputX * InputX);
-    xNPrimeofX = expValues;
-    xNPrimeofX = xNPrimeofX * inv_sqrt_2xPI;
-
-    xK2 = 0.2316419 * xInput;
-    xK2 = 1.0 + xK2;
-    xK2 = 1.0 / xK2;
-    xK2_2 = xK2 * xK2;
-    xK2_3 = xK2_2 * xK2;
-    xK2_4 = xK2_3 * xK2;
-    xK2_5 = xK2_4 * xK2;
-    
-    xLocal_1 = xK2 * 0.319381530;
-    xLocal_2 = xK2_2 * (-0.356563782);
-    xLocal_3 = xK2_3 * 1.781477937;
-    xLocal_2 = xLocal_2 + xLocal_3;
-    xLocal_3 = xK2_4 * (-1.821255978);
-    xLocal_2 = xLocal_2 + xLocal_3;
-    xLocal_3 = xK2_5 * 1.330274429;
-    xLocal_2 = xLocal_2 + xLocal_3;
-
-    xLocal_1 = xLocal_2 + xLocal_1;
-    xLocal   = xLocal_1 * xNPrimeofX;
-    xLocal   = 1.0 - xLocal;
-
-    OutputX  = xLocal;
-    
-    if (sign) {
-        OutputX = 1.0 - OutputX;
-    }
-    
-    return OutputX;
-} 
-
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-fptype BlkSchlsEqEuroNoDiv( fptype sptprice,
-                            fptype strike, fptype rate, fptype volatility,
-                            fptype time, int otype, float timet )
-{
-    fptype OptionPrice;
-
-    // local private working variables for the calculation
-    fptype xStockPrice;
-    fptype xStrikePrice;
-    fptype xRiskFreeRate;
-    fptype xVolatility;
-    fptype xTime;
-    fptype xSqrtTime;
-
-    fptype logValues;
-    fptype xLogTerm;
-    fptype xD1; 
-    fptype xD2;
-    fptype xPowerTerm;
-    fptype xDen;
-    fptype d1;
-    fptype d2;
-    fptype FutureValueX;
-    fptype NofXd1;
-    fptype NofXd2;
-    fptype NegNofXd1;
-    fptype NegNofXd2;    
-    
-    xStockPrice = sptprice;
-    xStrikePrice = strike;
-    xRiskFreeRate = rate;
-    xVolatility = volatility;
-
-    xTime = time;
-    xSqrtTime = sqrt(xTime);
-
-    logValues = log( sptprice / strike );
-        
-    xLogTerm = logValues;
-        
-    
-    xPowerTerm = xVolatility * xVolatility;
-    xPowerTerm = xPowerTerm * 0.5;
-        
-    xD1 = xRiskFreeRate + xPowerTerm;
-    xD1 = xD1 * xTime;
-    xD1 = xD1 + xLogTerm;
-
-    xDen = xVolatility * xSqrtTime;
-    xD1 = xD1 / xDen;
-    xD2 = xD1 -  xDen;
-
-    d1 = xD1;
-    d2 = xD2;
-    
-    NofXd1 = CNDF( d1 );
-    NofXd2 = CNDF( d2 );
-
-    FutureValueX = strike * ( exp( -(rate)*(time) ) );        
-    if (otype == 0) {            
-        OptionPrice = (sptprice * NofXd1) - (FutureValueX * NofXd2);
-    } else { 
-        NegNofXd1 = (1.0 - NofXd1);
-        NegNofXd2 = (1.0 - NofXd2);
-        OptionPrice = (FutureValueX * NegNofXd2) - (sptprice * NegNofXd1);
-    }
-    
-    return OptionPrice;
-}
-
-#ifdef ENABLE_TBB
-struct mainWork {
-  mainWork() {}
-  mainWork(mainWork &w, tbb::split) {}
-
-  void operator()(const tbb::blocked_range<int> &range) const {
-    fptype price;
-    int begin = range.begin();
-    int end = range.end();
-
-    for (int i=begin; i!=end; i++) {
-      /* Calling main function to calculate option value based on 
-       * Black & Scholes's equation.
-       */
-
-      price = BlkSchlsEqEuroNoDiv( sptprice[i], strike[i],
-                                   rate[i], volatility[i], otime[i], 
-                                   otype[i], 0);
-      prices[i] = price;
-
-#ifdef ERR_CHK 
-      fptype priceDelta = data[i].DGrefval - price;
-      if( fabs(priceDelta) >= 1e-5 ){
-        fprintf(stderr,"Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
-               i, price, data[i].DGrefval, priceDelta);
-        numError ++;
-      }
-#endif
-    }
-  }
-};
-
-#endif // ENABLE_TBB
-
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-
-#ifdef ENABLE_TBB
-int bs_thread(void *tid_ptr) {
-    int j;
-    tbb::affinity_partitioner a;
-
-    mainWork doall;
-    for (j=0; j<NUM_RUNS; j++) {
-      tbb::parallel_for(tbb::blocked_range<int>(0, numOptions), doall, a);
-    }
-
-    return 0;
-}
-#else // !ENABLE_TBB
-
-#ifdef WIN32
-DWORD WINAPI bs_thread(LPVOID tid_ptr){
-#else
-int bs_thread(void *tid_ptr) {
-#endif
-    int i, j;
-    fptype price;
-    fptype priceDelta;
-    int tid = *(int *)tid_ptr;
-    int start = tid * (numOptions / nThreads);
-    int end = start + (numOptions / nThreads);
-
-    for (j=0; j<NUM_RUNS; j++) {
-#ifdef ENABLE_OPENMP
-#pragma omp parallel for private(i, price, priceDelta)
-        for (i=0; i<numOptions; i++) {
-#else  //ENABLE_OPENMP
-        for (i=start; i<end; i++) {
-#endif //ENABLE_OPENMP
-            /* Calling main function to calculate option value based on 
-             * Black & Scholes's equation.
-             */
-            price = BlkSchlsEqEuroNoDiv( sptprice[i], strike[i],
-                                         rate[i], volatility[i], otime[i], 
-                                         otype[i], 0);
-            prices[i] = price;
-
-#ifdef ERR_CHK
-            priceDelta = data[i].DGrefval - price;
-            if( fabs(priceDelta) >= 1e-4 ){
-                printf("Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
-                       i, price, data[i].DGrefval, priceDelta);
-                numError ++;
-            }
-#endif
-        }
-    }
-
-    return 0;
-}
-#endif //ENABLE_TBB
-
-int main (int argc, char **argv)
-{
-    FILE *file;
-    int i;
-    int loopnum;
-    fptype * buffer;
-    int * buffer2;
-    int rv;
-
-#ifdef PARSEC_VERSION
-#define __PARSEC_STRING(x) #x
-#define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
-        printf("PARSEC Benchmark Suite Version "__PARSEC_XSTRING(PARSEC_VERSION)"\n");
-	fflush(NULL);
-#else
-        printf("PARSEC Benchmark Suite\n");
-	fflush(NULL);
-#endif //PARSEC_VERSION
-#ifdef ENABLE_PARSEC_HOOKS
-   __parsec_bench_begin(__parsec_blackscholes);
-#endif
-
-   if (argc != 4)
-        {
-                printf("Usage:\n\t%s <nthreads> <inputFile> <outputFile>\n", argv[0]);
-                exit(1);
-        }
-    nThreads = atoi(argv[1]);
-    char *inputFile = argv[2];
-    char *outputFile = argv[3];
-
-    //Read input data from file
-    file = fopen(inputFile, "r");
-    if(file == NULL) {
-      printf("ERROR: Unable to open file `%s'.\n", inputFile);
-      exit(1);
-    }
-    rv = fscanf(file, "%i", &numOptions);
-    if(rv != 1) {
-      printf("ERROR: Unable to read from file `%s'.\n", inputFile);
-      fclose(file);
-      exit(1);
-    }
-    if(nThreads > numOptions) {
-      printf("WARNING: Not enough work, reducing number of threads to match number of options.\n");
-      nThreads = numOptions;
-    }
-
-#if !defined(ENABLE_THREADS) && !defined(ENABLE_OPENMP) && !defined(ENABLE_TBB)
-    if(nThreads != 1) {
-        printf("Error: <nthreads> must be 1 (serial version)\n");
-        exit(1);
-    }
-#endif
-
-    // alloc spaces for the option data
-    data = (OptionData*)malloc(numOptions*sizeof(OptionData));
-    prices = (fptype*)malloc(numOptions*sizeof(fptype));
-    for ( loopnum = 0; loopnum < numOptions; ++ loopnum )
-    {
-        rv = fscanf(file, "%f %f %f %f %f %f %c %f %f", &data[loopnum].s, &data[loopnum].strike, &data[loopnum].r, &data[loopnum].divq, &data[loopnum].v, &data[loopnum].t, &data[loopnum].OptionType, &data[loopnum].divs, &data[loopnum].DGrefval);
-        if(rv != 9) {
-          printf("ERROR: Unable to read from file `%s'.\n", inputFile);
-          fclose(file);
-          exit(1);
-        }
-    }
-    rv = fclose(file);
-    if(rv != 0) {
-      printf("ERROR: Unable to close file `%s'.\n", inputFile);
-      exit(1);
-    }
-
-#ifdef ENABLE_THREADS
-    MAIN_INITENV(,8000000,nThreads);
-#endif
-    printf("Num of Options: %d\n", numOptions);
-    printf("Num of Runs: %d\n", NUM_RUNS);
-
-#define PAD 256
-#define LINESIZE 64
-
-    buffer = (fptype *) malloc(5 * numOptions * sizeof(fptype) + PAD);
-    sptprice = (fptype *) (((unsigned long long)buffer + PAD) & ~(LINESIZE - 1));
-    strike = sptprice + numOptions;
-    rate = strike + numOptions;
-    volatility = rate + numOptions;
-    otime = volatility + numOptions;
-
-    buffer2 = (int *) malloc(numOptions * sizeof(fptype) + PAD);
-    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));
-
-    for (i=0; i<numOptions; i++) {
-        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
-        sptprice[i]   = data[i].s;
-        strike[i]     = data[i].strike;
-        rate[i]       = data[i].r;
-        volatility[i] = data[i].v;    
-        otime[i]      = data[i].t;
-    }
-
-    printf("Size of data: %d\n", numOptions * (sizeof(OptionData) + sizeof(int)));
-
-#ifdef ENABLE_PARSEC_HOOKS
-    __parsec_roi_begin();
-#endif
-
-#ifdef ENABLE_THREADS
-#ifdef WIN32
-    HANDLE *threads;
-    int *nums;
-    threads = (HANDLE *) malloc (nThreads * sizeof(HANDLE));
-    nums = (int *) malloc (nThreads * sizeof(int));
-
-    for(i=0; i<nThreads; i++) {
-        nums[i] = i;
-        threads[i] = CreateThread(0, 0, bs_thread, &nums[i], 0, 0);
-    }
-    WaitForMultipleObjects(nThreads, threads, TRUE, INFINITE);
-    free(threads);
-    free(nums);
-#else
-    int *tids;
-    tids = (int *) malloc (nThreads * sizeof(int));
-
-    for(i=0; i<nThreads; i++) {
-        tids[i]=i;
-        CREATE_WITH_ARG(bs_thread, &tids[i]);
-    }
-    WAIT_FOR_END(nThreads);
-    free(tids);
-#endif //WIN32
-#else //ENABLE_THREADS
-#ifdef ENABLE_OPENMP
-    {
-        int tid=0;
-        omp_set_num_threads(nThreads);
-        bs_thread(&tid);
-    }
-#else //ENABLE_OPENMP
-#ifdef ENABLE_TBB
-    tbb::task_scheduler_init init(nThreads);
-
-    int tid=0;
-    bs_thread(&tid);
-#else //ENABLE_TBB
-    //serial version
-    int tid=0;
-    bs_thread(&tid);
-#endif //ENABLE_TBB
-#endif //ENABLE_OPENMP
-#endif //ENABLE_THREADS
-
-#ifdef ENABLE_PARSEC_HOOKS
-    __parsec_roi_end();
-#endif
-
-    //Write prices to output file
-    file = fopen(outputFile, "w");
-    if(file == NULL) {
-      printf("ERROR: Unable to open file `%s'.\n", outputFile);
-      exit(1);
-    }
-    rv = fprintf(file, "%i\n", numOptions);
-    if(rv < 0) {
-      printf("ERROR: Unable to write to file `%s'.\n", outputFile);
-      fclose(file);
-      exit(1);
-    }
-    for(i=0; i<numOptions; i++) {
-      rv = fprintf(file, "%.18f\n", prices[i]);
-      if(rv < 0) {
-        printf("ERROR: Unable to write to file `%s'.\n", outputFile);
-        fclose(file);
-        exit(1);
-      }
-    }
-    rv = fclose(file);
-    if(rv != 0) {
-      printf("ERROR: Unable to close file `%s'.\n", outputFile);
-      exit(1);
-    }
-
-#ifdef ERR_CHK
-    printf("Num Errors: %d\n", numError);
-#endif
-    free(data);
-    free(prices);
-
-#ifdef ENABLE_PARSEC_HOOKS
-    __parsec_bench_end();
-#endif
-
-    return 0;
-}
-
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.cpp blackscholes/blackscholes.cpp
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.cpp	1969-12-31 16:00:00.000000000 -0800
+++ blackscholes/blackscholes.cpp	2021-07-27 21:09:57.996855000 -0700
@@ -0,0 +1,284 @@
+// Copyright (c) 2007 Intel Corp.
+
+// Black-Scholes
+// Analytical method for calculating European Options
+//
+// 
+// Reference Source: Options, Futures, and Other Derivatives, 3rd Edition, Prentice 
+// Hall, John C. Hull,
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <cmath>
+#include <executionTime.h>
+#include <datautils.hpp>
+#include <approx.h>
+#include <omp.h>
+
+//Precision to use for calculations
+#define fptype double 
+
+#define DOUBLE 0
+#define FLOAT 1
+#define INT 2
+
+
+fptype *prices;
+size_t numOptions;
+
+int    * otype;
+fptype * sptprice;
+fptype * strike;
+fptype * rate;
+fptype * volatility;
+fptype * otime;
+int numError = 0;
+int nThreads;
+
+////////////////////////////////////////////////////////////////////////////////
+////////////////////////////////////////////////////////////////////////////////
+///////////////////////////////////////////////////////////////////////////////
+////////////////////////////////////////////////////////////////////////////////
+// Cumulative Normal Distribution Function
+// See Hull, Section 11.8, P.243-244
+//
+//CONSTANTS
+const fptype inv_sqrt_2xPI=0.39894228040143270286f;
+const fptype zero = 0.0;
+const fptype half = 0.5;
+const fptype const1=0.2316419;
+const fptype one=1.0;
+const fptype const2=0.319381530;
+const fptype const3=0.356563782;
+const fptype const4=1.781477937;
+const fptype const5=1.821255978;
+const fptype const6=1.330274429;
+
+fptype CNDF ( fptype InputX ) 
+{
+    int sign;
+
+    fptype OutputX;
+    fptype xInput;
+    fptype xNPrimeofX;
+    fptype expValues;
+    fptype xK2;
+    fptype xK2_2, xK2_3;
+    fptype xK2_4, xK2_5;
+    fptype xLocal, xLocal_1;
+    fptype xLocal_2, xLocal_3;
+    fptype temp;
+
+    // Check for negative value of InputX
+    if (InputX < zero) {
+        InputX = -InputX;
+        sign = 1;
+    } else 
+        sign = 0;
+
+    xInput = InputX;
+
+    // Compute NPrimeX term common to both four & six decimal accuracy calcs
+    temp = -half * InputX * InputX;
+
+//@APPROX LABEL("exp") IN(temp) OUT(expValues) APPROX_TECH(MEMO_IN|MEMO_OUT)
+    expValues = exp(temp);
+
+    xNPrimeofX = expValues;
+    xNPrimeofX = xNPrimeofX * inv_sqrt_2xPI;
+
+    xK2 = const1* xInput;
+    xK2 = one + xK2;
+    xK2 = one / xK2;
+    xK2_2 = xK2 * xK2;
+    xK2_3 = xK2_2 * xK2;
+    xK2_4 = xK2_3 * xK2;
+    xK2_5 = xK2_4 * xK2;
+
+    xLocal_1 = xK2 * const2;
+    xLocal_2 = xK2_2 * (-const3);
+    xLocal_3 = xK2_3 * const4;
+    xLocal_2 = xLocal_2 + xLocal_3;
+    xLocal_3 = xK2_4 * (-const5);
+    xLocal_2 = xLocal_2 + xLocal_3;
+    xLocal_3 = xK2_5 * const6;
+    xLocal_2 = xLocal_2 + xLocal_3;
+
+    xLocal_1 = xLocal_2 + xLocal_1;
+    xLocal   = xLocal_1 * xNPrimeofX;
+    xLocal   = one - xLocal;
+
+    OutputX  = xLocal;
+
+    if (sign) {
+        OutputX = one - OutputX;
+    }
+
+    return OutputX;
+}
+
+fptype BlkSchlsEqEuroNoDiv( fptype sptprice,
+        fptype strike, fptype rate, fptype volatility,
+        fptype time, int otype, float timet )
+{
+    fptype OptionPrice;
+
+    // local private working variables for the calculation
+    fptype xStockPrice;
+    fptype xStrikePrice;
+    fptype xRiskFreeRate;
+    fptype xVolatility;
+
+    fptype xTime;
+    fptype xSqrtTime;
+
+    fptype logValues;
+    fptype xLogTerm;
+    fptype xD1;
+    fptype xD2;
+    fptype xPowerTerm;
+    fptype xDen;
+    fptype d1;
+    fptype d2;
+    fptype FutureValueX;
+    fptype NofXd1;
+    fptype NofXd2;
+    fptype NegNofXd1;
+    fptype NegNofXd2;    
+    fptype temp;
+
+    xStockPrice = sptprice;
+    xStrikePrice = strike;
+    xRiskFreeRate = rate;
+    xVolatility = volatility;
+
+    xTime = time;
+    xSqrtTime = sqrt(xTime);
+
+    temp = sptprice / strike;
+
+    logValues = log( sptprice / strike );
+
+    xLogTerm = logValues;
+
+
+    xPowerTerm = xVolatility * xVolatility;
+    xPowerTerm = xPowerTerm * half;
+
+    xD1 = xRiskFreeRate + xPowerTerm;
+    xD1 = xD1 * xTime;
+    xD1 = xD1 + xLogTerm;
+
+    xDen = xVolatility * xSqrtTime;
+    xD1 = xD1 / xDen;
+    xD2 = xD1 -  xDen;
+
+    d1 = xD1;
+    d2 = xD2;
+
+//@APPROX LABEL("CNDF_1") IN(d1) OUT(NofXd1) APPROX_TECH(MEMO_IN|MEMO_OUT)
+    NofXd1 = CNDF( d1 );
+
+//@APPROX LABEL("CNDF_2") IN(d2) OUT(NofXd2) APPROX_TECH(MEMO_IN|MEMO_OUT)
+    NofXd2 = CNDF( d2 );
+
+    temp = -(rate*time);
+
+    FutureValueX =  ( exp( temp  ) );
+
+    FutureValueX *=strike;
+
+    if (otype == 0) {
+        OptionPrice = (sptprice * NofXd1) - (FutureValueX * NofXd2);
+    } else {
+        NegNofXd1 = (one - NofXd1);
+        NegNofXd2 = (one - NofXd2);
+        OptionPrice = (FutureValueX * NegNofXd2) - (sptprice * NegNofXd1);
+    }
+
+    return OptionPrice;
+}
+
+
+int bs_thread(void *tid_ptr) {
+    int i, j,k;
+    fptype price;
+    fptype priceDelta;
+    int end = numOptions;
+//@APPROX LABEL("ENTIRE") APPROX_TECH(PERFO)
+#pragma omp parallel for firstprivate(end)
+    for (i=0; i<end; i++) {
+//@APPROX LABEL("ENTIRE") IN(sptprice[i], strike[i], rate[i],volatility[i],otime[i],otype[i]) OUT(prices[i]) APPROX_TECH(MEMO_IN|MEMO_OUT)
+        prices[i] = BlkSchlsEqEuroNoDiv( sptprice[i], strike[i],
+                rate[i], volatility[i], otime[i],
+                otype[i], 0);
+
+    }
+
+    return 0;
+}
+
+int main (int argc, char **argv)
+{
+    FILE *file;
+    int i;
+    int loopnum;
+    int rv;
+    struct timeval start, end; 
+
+    // start timer. 
+
+
+    printf("PARSEC Benchmark Suite\n");
+    fflush(NULL);
+    if (argc != 4)
+    {
+        printf("Usage:\n\t%s <nthreads> <inputFile> <outputFile>\n", argv[0]);
+        exit(1);
+    }
+    nThreads = atoi(argv[1]);
+    char *inputFile = argv[2];
+    char *outputFile = argv[3];
+
+    //Read input data from file
+    file = fopen(inputFile, "rb");
+    if(file == NULL) {
+        printf("ERROR: Unable to open file `%s'.\n", inputFile);
+        exit(1);
+    }
+
+    if(nThreads != 1) {
+        printf("Error: <nthreads> must be 1 (serial version)\n");
+        exit(1);
+    }
+
+#define PAD 256
+#define LINESIZE 64
+    readData(file,&otype, &numOptions);  
+    readData(file,&sptprice, &numOptions);  
+    readData(file,&strike, &numOptions);  
+    readData(file,&rate, &numOptions);  
+    readData(file,&volatility, &numOptions);  
+    readData(file,&otime, &numOptions);  
+    prices = (fptype*) malloc(sizeof(fptype)*numOptions);
+
+
+    int tid=0;
+
+    startMeasure();
+    bs_thread(&tid);
+    stopMeasure();
+
+    //Write prices to output file
+    writeData(prices, numOptions, DOUBLE, outputFile);
+    free(sptprice);
+    free(strike);
+    free(rate);
+    free(volatility);
+    free(otime);
+    free(otype);
+    free(prices);
+
+    return 0;
+}
+
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.simd.c blackscholes/blackscholes.simd.c
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.simd.c	2021-07-27 19:39:33.999054000 -0700
+++ blackscholes/blackscholes.simd.c	1969-12-31 16:00:00.000000000 -0800
@@ -1,598 +0,0 @@
-// Copyright (c) 2007 Intel Corp.
-
-// Black-Scholes
-// Analytical method for calculating European Options
-//
-// 
-// Reference Source: Options, Futures, and Other Derivatives, 3rd Edition, Prentice 
-// Hall, John C. Hull,
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <math.h>
-#include <string.h>
-
-#ifndef WIN32
-#include <pmmintrin.h>
-#else
-#include <xmmintrin.h>
-#endif
-
-#ifdef ENABLE_PARSEC_HOOKS
-#include <hooks.h>
-#endif
-
-// Multi-threaded pthreads header
-#ifdef ENABLE_THREADS
-// Add the following line so that icc 9.0 is compatible with pthread lib.
-#define __thread __threadp  
-MAIN_ENV
-#undef __thread
-#endif
-
-// Multi-threaded OpenMP header
-#ifdef ENABLE_OPENMP
-#include <omp.h>
-#endif
-
-#ifdef ENABLE_TBB
-#include "tbb/blocked_range.h"
-#include "tbb/parallel_for.h"
-#include "tbb/task_scheduler_init.h"
-#include "tbb/tick_count.h"
-
-using namespace std;
-using namespace tbb;
-#endif //ENABLE_TBB
-
-// Multi-threaded header for Windows
-#ifdef WIN32
-#pragma warning(disable : 4305)
-#pragma warning(disable : 4244)
-#include <windows.h>
-#endif
-
-#ifdef __GNUC__
-#define _MM_ALIGN16 __attribute__((aligned (16)))
-#define MUSTINLINE __attribute__((always_inline))
-#else
-#define MUSTINLINE __forceinline
-#endif
-
-// NCO = Number of Concurrent Options = SIMD Width
-// NCO is currently set in the Makefile.
-#ifndef NCO
-#error NCO must be defined.
-#endif
-
-#if (NCO==2)
-#define fptype double
-#define SIMD_WIDTH 2
-#define _MMR      __m128d
-#define _MM_LOAD  _mm_load_pd
-#define _MM_STORE _mm_store_pd
-#define _MM_MUL   _mm_mul_pd
-#define _MM_ADD   _mm_add_pd
-#define _MM_SUB   _mm_sub_pd
-#define _MM_DIV   _mm_div_pd
-#define _MM_SQRT  _mm_sqrt_pd
-#define _MM_SET(A)  _mm_set_pd(A,A)
-#define _MM_SETR  _mm_set_pd
-#endif
-
-#if (NCO==4)
-#define fptype float
-#define SIMD_WIDTH 4
-#define _MMR      __m128
-#define _MM_LOAD  _mm_load_ps
-#define _MM_STORE _mm_store_ps
-#define _MM_MUL   _mm_mul_ps
-#define _MM_ADD   _mm_add_ps
-#define _MM_SUB   _mm_sub_ps
-#define _MM_DIV   _mm_div_ps
-#define _MM_SQRT  _mm_sqrt_ps
-#define _MM_SET(A)  _mm_set_ps(A,A,A,A)
-#define _MM_SETR  _mm_set_ps
-#endif
-
-#define NUM_RUNS 100
-
-typedef struct OptionData_ {
-        fptype s;          // spot price
-        fptype strike;     // strike price
-        fptype r;          // risk-free interest rate
-        fptype divq;       // dividend rate
-        fptype v;          // volatility
-        fptype t;          // time to maturity or option expiration in years 
-                           //     (1yr = 1.0, 6mos = 0.5, 3mos = 0.25, ..., etc)  
-        char OptionType;   // Option type.  "P"=PUT, "C"=CALL
-        fptype divs;       // dividend vals (not used in this test)
-        fptype DGrefval;   // DerivaGem Reference Value
-} OptionData;
-
-_MM_ALIGN16 OptionData* data;
-_MM_ALIGN16 fptype* prices;
-int numOptions;
-
-int    * otype;
-fptype * sptprice;
-fptype * strike;
-fptype * rate;
-fptype * volatility;
-fptype * otime;
-int numError = 0;
-int nThreads;
-
-////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////
-///////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////
-// Cumulative Normal Distribution Function
-// See Hull, Section 11.8, P.243-244
-#define inv_sqrt_2xPI 0.39894228040143270286
-
-MUSTINLINE void CNDF ( fptype * OutputX, fptype * InputX ) 
-{
-    int sign[SIMD_WIDTH];
-    int i;
-    _MMR xInput;
-    _MMR xNPrimeofX;
-    _MM_ALIGN16 fptype expValues[SIMD_WIDTH];
-    _MMR xK2;
-    _MMR xK2_2, xK2_3, xK2_4, xK2_5;
-    _MMR xLocal, xLocal_1, xLocal_2, xLocal_3;
-
-    for (i=0; i<SIMD_WIDTH; i++) {
-        // Check for negative value of InputX
-        if (InputX[i] < 0.0) {
-            InputX[i] = -InputX[i];
-            sign[i] = 1;
-        } else 
-            sign[i] = 0;
-    }
-    // printf("InputX[0]=%lf\n", InputX[0]);
-    // printf("InputX[1]=%lf\n", InputX[1]);
-
-    xInput = _MM_LOAD(InputX);
-    
-// local vars
- 
-// Compute NPrimeX term common to both four & six decimal accuracy calcs
-
-    for (i=0; i<SIMD_WIDTH; i++) {
-        expValues[i] = exp(-0.5f * InputX[i] * InputX[i]);
-        // printf("exp[%d]: %f\n", i, expValues[i]);
-    }
-    
-    xNPrimeofX = _MM_LOAD(expValues);
-    xNPrimeofX = _MM_MUL(xNPrimeofX, _MM_SET(inv_sqrt_2xPI));
-
-    xK2 = _MM_MUL(_MM_SET(0.2316419), xInput);
-    xK2 = _MM_ADD(xK2, _MM_SET(1.0));
-    xK2 = _MM_DIV(_MM_SET(1.0), xK2);
-    // xK2 = _mm_rcp_pd(xK2);  // No rcp function for double-precision
-    
-    xK2_2 = _MM_MUL(xK2, xK2);
-    xK2_3 = _MM_MUL(xK2_2, xK2);
-    xK2_4 = _MM_MUL(xK2_3, xK2);
-    xK2_5 = _MM_MUL(xK2_4, xK2);
-    
-    xLocal_1 = _MM_MUL(xK2, _MM_SET(0.319381530));
-    xLocal_2 = _MM_MUL(xK2_2, _MM_SET(-0.356563782));
-    xLocal_3 = _MM_MUL(xK2_3, _MM_SET(1.781477937));
-    xLocal_2 = _MM_ADD(xLocal_2, xLocal_3);
-    xLocal_3 = _MM_MUL(xK2_4, _MM_SET(-1.821255978));
-    xLocal_2 = _MM_ADD(xLocal_2, xLocal_3);
-    xLocal_3 = _MM_MUL(xK2_5, _MM_SET(1.330274429));
-    xLocal_2 = _MM_ADD(xLocal_2, xLocal_3);
-    
-    xLocal_1 = _MM_ADD(xLocal_2, xLocal_1);
-    xLocal   = _MM_MUL(xLocal_1, xNPrimeofX);
-    xLocal   = _MM_SUB(_MM_SET(1.0), xLocal);
-    
-    _MM_STORE(OutputX, xLocal);
-    // _mm_storel_pd(&OutputX[0], xLocal);
-    // _mm_storeh_pd(&OutputX[1], xLocal);
-    
-    for (i=0; i<SIMD_WIDTH; i++) {
-        if (sign[i]) {
-            OutputX[i] = (1.0 - OutputX[i]);
-       }
-    } 
-} 
-
-// For debugging
-void print_xmm(_MMR in, char* s) {
-    int i;
-    _MM_ALIGN16 fptype val[SIMD_WIDTH];
-
-    _MM_STORE(val, in);
-    printf("%s: ", s);
-    for (i=0; i<SIMD_WIDTH; i++) {
-        printf("%f ", val[i]);
-    }
-    printf("\n");
-}
-
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-void BlkSchlsEqEuroNoDiv (fptype * OptionPrice, int numOptions, fptype * sptprice,
-                          fptype * strike, fptype * rate, fptype * volatility,
-                          fptype * time, int * otype, float timet)
-{
-    int i;
-// local private working variables for the calculation
-    _MMR xStockPrice;
-    _MMR xStrikePrice;
-    _MMR xRiskFreeRate;
-    _MMR xVolatility;
-    _MMR xTime;
-    _MMR xSqrtTime;
-
-    _MM_ALIGN16 fptype logValues[NCO];
-    _MMR xLogTerm;
-    _MMR xD1, xD2;
-    _MMR xPowerTerm;
-    _MMR xDen;
-    _MM_ALIGN16 fptype d1[SIMD_WIDTH];
-    _MM_ALIGN16 fptype d2[SIMD_WIDTH];
-    _MM_ALIGN16 fptype FutureValueX[SIMD_WIDTH];
-    _MM_ALIGN16 fptype NofXd1[SIMD_WIDTH];
-    _MM_ALIGN16 fptype NofXd2[SIMD_WIDTH];
-    _MM_ALIGN16 fptype NegNofXd1[SIMD_WIDTH];
-    _MM_ALIGN16 fptype NegNofXd2[SIMD_WIDTH];    
-
-    xStockPrice = _MM_LOAD(sptprice);
-    xStrikePrice = _MM_LOAD(strike);
-    xRiskFreeRate = _MM_LOAD(rate);
-    xVolatility = _MM_LOAD(volatility);
-    xTime = _MM_LOAD(time);
-
-    xSqrtTime = _MM_SQRT(xTime);
-
-    for(i=0; i<SIMD_WIDTH;i ++) {
-        logValues[i] = log(sptprice[i] / strike[i]);
-    }
-
-    xLogTerm = _MM_LOAD(logValues);
-
-    xPowerTerm = _MM_MUL(xVolatility, xVolatility);
-    xPowerTerm = _MM_MUL(xPowerTerm, _MM_SET(0.5));
-    xD1 = _MM_ADD(xRiskFreeRate, xPowerTerm);
-
-    xD1 = _MM_MUL(xD1, xTime);
-
-    xD1 = _MM_ADD(xD1, xLogTerm);
-    xDen = _MM_MUL(xVolatility, xSqrtTime);
-    xD1 = _MM_DIV(xD1, xDen);
-    xD2 = _MM_SUB(xD1, xDen);
-
-    _MM_STORE(d1, xD1);
-    _MM_STORE(d2, xD2);
-
-    CNDF( NofXd1, d1 );
-    CNDF( NofXd2, d2 );
-
-    for (i=0; i<SIMD_WIDTH; i++) {
-        FutureValueX[i] = strike[i] * (exp(-(rate[i])*(time[i])));
-        // printf("FV=%lf\n", FutureValueX[i]);
-
-        // NofXd1[i] = NofX(d1[i]);
-        // NofXd2[i] = NofX(d2[i]);
-        // printf("NofXd1=%lf\n", NofXd1[i]);
-        // printf("NofXd2=%lf\n", NofXd2[i]);
-
-        if (otype[i] == 0) {
-            OptionPrice[i] = (sptprice[i] * NofXd1[i]) - (FutureValueX[i] * NofXd2[i]);
-        }
-        else { 
-            NegNofXd1[i] = (1.0 - (NofXd1[i]));
-            NegNofXd2[i] = (1.0 - (NofXd2[i]));
-            OptionPrice[i] = (FutureValueX[i] * NegNofXd2[i]) - (sptprice[i] * NegNofXd1[i]);
-        }
-        // printf("OptionPrice[0] = %lf\n", OptionPrice[i]);
-    }
-
-}
-
-#ifdef ENABLE_TBB
-struct mainWork {
-  mainWork(){}
-  mainWork(mainWork &w, tbb::split){}
-
-  void operator()(const tbb::blocked_range<int> &range) const {
-    fptype price[NCO];
-    fptype priceDelta;
-    int begin = range.begin();
-    int end = range.end();
-
-    for (int i=begin; i!=end; i+=NCO) {
-      /* Calling main function to calculate option value based on 
-       * Black & Scholes's equation.
-       */
-
-      BlkSchlsEqEuroNoDiv( price, NCO, &(sptprice[i]), &(strike[i]),
-                           &(rate[i]), &(volatility[i]), &(otime[i]), 
-                           &(otype[i]), 0);
-      for (int k=0; k<NCO; k++) {
-        prices[i+k] = price[k];
-
-#ifdef ERR_CHK 
-        priceDelta = data[i+k].DGrefval - price[k];
-        if( fabs(priceDelta) >= 1e-5 ){
-          fprintf(stderr,"Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
-                 i+k, price, data[i+k].DGrefval, priceDelta);
-          numError ++;
-        }
-#endif
-      }
-    }
-  }
-};
-
-#endif // ENABLE_TBB
-
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////
-
-#ifdef ENABLE_TBB
-int bs_thread(void *tid_ptr) {
-    int j;
-    tbb::affinity_partitioner a;
-
-    mainWork doall;
-    for (j=0; j<NUM_RUNS; j++) {
-      tbb::parallel_for(tbb::blocked_range<int>(0, numOptions), doall, a);
-    }
-
-    return 0;
-}
-#else // !ENABLE_TBB
-
-#ifdef WIN32
-DWORD WINAPI bs_thread(LPVOID tid_ptr){
-#else
-int bs_thread(void *tid_ptr) {
-#endif
-    int i, j, k;
-    fptype price[NCO];
-    fptype priceDelta;
-    int tid = *(int *)tid_ptr;
-    int start = tid * (numOptions / nThreads);
-    int end = start + (numOptions / nThreads);
-
-    for (j=0; j<NUM_RUNS; j++) {
-#ifdef ENABLE_OPENMP
-#pragma omp parallel for private(i, price, priceDelta)
-        for (i=0; i<numOptions; i += NCO) {
-#else  //ENABLE_OPENMP
-        for (i=start; i<end; i += NCO) {
-#endif //ENABLE_OPENMP
-            // Calling main function to calculate option value based on Black & Scholes's
-            // equation.
-            BlkSchlsEqEuroNoDiv(price, NCO, &(sptprice[i]), &(strike[i]),
-                                &(rate[i]), &(volatility[i]), &(otime[i]), &(otype[i]), 0);
-            for (k=0; k<NCO; k++) {
-              prices[i+k] = price[k];
-            } 
-#ifdef ERR_CHK
-            for (k=0; k<NCO; k++) {
-                priceDelta = data[i+k].DGrefval - price[k];
-                if (fabs(priceDelta) >= 1e-4) {
-                    printf("Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
-                           i + k, price[k], data[i+k].DGrefval, priceDelta);
-                    numError ++;
-                }
-            }
-#endif
-        }
-    }
-
-    return 0;
-}
-#endif //ENABLE_TBB
-
-int main (int argc, char **argv)
-{
-    FILE *file;
-    int i;
-    int loopnum;
-    fptype * buffer;
-    int * buffer2;
-    int rv;
-
-#ifdef PARSEC_VERSION
-#define __PARSEC_STRING(x) #x
-#define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
-        printf("PARSEC Benchmark Suite Version "__PARSEC_XSTRING(PARSEC_VERSION)"\n");
-	fflush(NULL);
-#else
-        printf("PARSEC Benchmark Suite\n");
-	fflush(NULL);
-#endif //PARSEC_VERSION
-#ifdef ENABLE_PARSEC_HOOKS
-   __parsec_bench_begin(__parsec_blackscholes);
-#endif
-
-   if (argc != 4)
-        {
-                printf("Usage:\n\t%s <nthreads> <inputFile> <outputFile>\n", argv[0]);
-                exit(1);
-        }
-    nThreads = atoi(argv[1]);
-    char *inputFile = argv[2];
-    char *outputFile = argv[3];
-
-    //Read input data from file
-    file = fopen(inputFile, "r");
-    if(file == NULL) {
-      printf("ERROR: Unable to open file `%s'.\n", inputFile);
-      exit(1);
-    }
-    rv = fscanf(file, "%i", &numOptions);
-    if(rv != 1) {
-      printf("ERROR: Unable to read from file `%s'.\n", inputFile);
-      fclose(file);
-      exit(1);
-    }
-    if(NCO > numOptions) {
-      printf("ERROR: Not enough work for SIMD operation.\n");
-      fclose(file);
-      exit(1);
-    }
-    if(nThreads > numOptions/NCO) {
-      printf("WARNING: Not enough work, reducing number of threads to match number of SIMD options packets.\n");
-      nThreads = numOptions/NCO;
-    }
-
-#if !defined(ENABLE_THREADS) && !defined(ENABLE_OPENMP) && !defined(ENABLE_TBB)
-    if(nThreads != 1) {
-        printf("Error: <nthreads> must be 1 (serial version)\n");
-        exit(1);
-    }
-#endif
-
-    data = (OptionData*)malloc(numOptions*sizeof(OptionData));
-    prices = (fptype*)malloc(numOptions*sizeof(fptype));
-    for ( loopnum = 0; loopnum < numOptions; ++ loopnum )
-    {
-        rv = fscanf(file, "%f %f %f %f %f %f %c %f %f", &data[loopnum].s, &data[loopnum].strike, &data[loopnum].r, &data[loopnum].divq, &data[loopnum].v, &data[loopnum].t, &data[loopnum].OptionType, &data[loopnum].divs, &data[loopnum].DGrefval);
-        if(rv != 9) {
-          printf("ERROR: Unable to read from file `%s'.\n", inputFile);
-          fclose(file);
-          exit(1);
-        }
-    }
-    rv = fclose(file);
-    if(rv != 0) {
-      printf("ERROR: Unable to close file `%s'.\n", inputFile);
-      exit(1);
-    }
-
-#ifdef ENABLE_THREADS
-    MAIN_INITENV(,8000000,nThreads);
-#endif
-    printf("Num of Options: %d\n", numOptions);
-    printf("Num of Runs: %d\n", NUM_RUNS);
-
-#define PAD 256
-#define LINESIZE 64
-
-    buffer = (fptype *) malloc(5 * numOptions * sizeof(fptype) + PAD);
-    sptprice = (fptype *) (((unsigned long long)buffer + PAD) & ~(LINESIZE - 1));
-    strike = sptprice + numOptions;
-    rate = strike + numOptions;
-    volatility = rate + numOptions;
-    otime = volatility + numOptions;
-
-    buffer2 = (int *) malloc(numOptions * sizeof(fptype) + PAD);
-    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));
-
-    for (i=0; i<numOptions; i++) {
-        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
-        sptprice[i]   = data[i].s;
-        strike[i]     = data[i].strike;
-        rate[i]       = data[i].r;
-        volatility[i] = data[i].v;
-        otime[i]      = data[i].t;
-    }
-
-    printf("Size of data: %d\n", numOptions * (sizeof(OptionData) + sizeof(int)));
-
-#ifdef ENABLE_PARSEC_HOOKS
-    __parsec_roi_begin();
-#endif
-
-#ifdef ENABLE_THREADS
-#ifdef WIN32
-    HANDLE *threads;
-    int *nums;
-    threads = (HANDLE *) malloc (nThreads * sizeof(HANDLE));
-    nums = (int *) malloc (nThreads * sizeof(int));
-
-    for(i=0; i<nThreads; i++) {
-        nums[i] = i;
-        threads[i] = CreateThread(0, 0, bs_thread, &nums[i], 0, 0);
-    }
-    WaitForMultipleObjects(nThreads, threads, TRUE, INFINITE);
-    free(threads);
-    free(nums);
-#else
-    int *tids;
-    tids = (int *) malloc (nThreads * sizeof(int));
-
-    for(i=0; i<nThreads; i++) {
-        tids[i]=i;
-        CREATE_WITH_ARG(bs_thread, &tids[i]);
-    }
-    WAIT_FOR_END(nThreads);
-    free(tids);
-#endif //WIN32
-#else //ENABLE_THREADS
-#ifdef ENABLE_OPENMP
-    {
-        int tid=0;
-        omp_set_num_threads(nThreads);
-        bs_thread(&tid);
-    }
-#else //ENABLE_OPENMP
-#ifdef ENABLE_TBB
-    tbb::task_scheduler_init init(nThreads);
-
-    int tid=0;
-    bs_thread(&tid);
-#else //ENABLE_TBB
-    //serial version
-    int tid=0;
-    bs_thread(&tid);
-#endif //ENABLE_TBB
-#endif //ENABLE_OPENMP
-#endif //ENABLE_THREADS
-
-#ifdef ENABLE_PARSEC_HOOKS
-    __parsec_roi_end();
-#endif
-
-    //Write prices to output file
-    file = fopen(outputFile, "w");
-    if(file == NULL) {
-      printf("ERROR: Unable to open file `%s'.\n", outputFile);
-      exit(1);
-    }
-    rv = fprintf(file, "%i\n", numOptions);
-    if(rv < 0) {
-      printf("ERROR: Unable to write to file `%s'.\n", outputFile);
-      fclose(file);
-      exit(1);
-    }
-    for(i=0; i<numOptions; i++) {
-      rv = fprintf(file, "%.18f\n", prices[i]);
-      if(rv < 0) {
-        printf("ERROR: Unable to write to file `%s'.\n", outputFile);
-        fclose(file);
-        exit(1);
-      }
-    }
-    rv = fclose(file);
-    if(rv != 0) {
-      printf("ERROR: Unable to close file `%s'.\n", outputFile);
-      exit(1);
-    }
-
-#ifdef ERR_CHK
-    printf("Num Errors: %d\n", numError);
-#endif
-    free(data);
-    free(prices);
-
-#ifdef ENABLE_PARSEC_HOOKS
-    __parsec_bench_end();
-#endif
-
-    return 0;
-}
-
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.simd.vcproj blackscholes/blackscholes.simd.vcproj
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.simd.vcproj	2021-07-27 19:39:34.003053000 -0700
+++ blackscholes/blackscholes.simd.vcproj	1969-12-31 16:00:00.000000000 -0800
@@ -1,197 +0,0 @@
-<?xml version="1.0" encoding="Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="8.00"
-	Name="blackscholes.simd"
-	ProjectGUID="{8DF343BB-A8BD-451B-B01D-4C879C34B667}"
-	RootNamespace="blackscholessimd"
-	Keyword="Win32Proj"
-	>
-	<Platforms>
-		<Platform
-			Name="Win32"
-		/>
-	</Platforms>
-	<ToolFiles>
-	</ToolFiles>
-	<Configurations>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
-			IntermediateDirectory="$(ConfigurationName)"
-			ConfigurationType="1"
-			CharacterSet="1"
-			>
-			<Tool
-				Name="VCPreBuildEventTool"
-			/>
-			<Tool
-				Name="VCCustomBuildTool"
-			/>
-			<Tool
-				Name="VCXMLDataGeneratorTool"
-			/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"
-			/>
-			<Tool
-				Name="VCMIDLTool"
-			/>
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE"
-				MinimalRebuild="true"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				UsePrecompiledHeader="0"
-				WarningLevel="3"
-				Detect64BitPortabilityProblems="true"
-				DebugInformationFormat="4"
-			/>
-			<Tool
-				Name="VCManagedResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCPreLinkEventTool"
-			/>
-			<Tool
-				Name="VCLinkerTool"
-				LinkIncremental="2"
-				GenerateDebugInformation="true"
-				SubSystem="1"
-				TargetMachine="1"
-			/>
-			<Tool
-				Name="VCALinkTool"
-			/>
-			<Tool
-				Name="VCManifestTool"
-			/>
-			<Tool
-				Name="VCXDCMakeTool"
-			/>
-			<Tool
-				Name="VCBscMakeTool"
-			/>
-			<Tool
-				Name="VCFxCopTool"
-			/>
-			<Tool
-				Name="VCAppVerifierTool"
-			/>
-			<Tool
-				Name="VCWebDeploymentTool"
-			/>
-			<Tool
-				Name="VCPostBuildEventTool"
-			/>
-		</Configuration>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
-			IntermediateDirectory="$(ConfigurationName)"
-			ConfigurationType="1"
-			CharacterSet="1"
-			WholeProgramOptimization="1"
-			>
-			<Tool
-				Name="VCPreBuildEventTool"
-			/>
-			<Tool
-				Name="VCCustomBuildTool"
-			/>
-			<Tool
-				Name="VCXMLDataGeneratorTool"
-			/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"
-			/>
-			<Tool
-				Name="VCMIDLTool"
-			/>
-			<Tool
-				Name="VCCLCompilerTool"
-				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE"
-				RuntimeLibrary="2"
-				UsePrecompiledHeader="0"
-				WarningLevel="3"
-				Detect64BitPortabilityProblems="true"
-				DebugInformationFormat="3"
-			/>
-			<Tool
-				Name="VCManagedResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCPreLinkEventTool"
-			/>
-			<Tool
-				Name="VCLinkerTool"
-				LinkIncremental="1"
-				GenerateDebugInformation="true"
-				SubSystem="1"
-				OptimizeReferences="2"
-				EnableCOMDATFolding="2"
-				TargetMachine="1"
-			/>
-			<Tool
-				Name="VCALinkTool"
-			/>
-			<Tool
-				Name="VCManifestTool"
-			/>
-			<Tool
-				Name="VCXDCMakeTool"
-			/>
-			<Tool
-				Name="VCBscMakeTool"
-			/>
-			<Tool
-				Name="VCFxCopTool"
-			/>
-			<Tool
-				Name="VCAppVerifierTool"
-			/>
-			<Tool
-				Name="VCWebDeploymentTool"
-			/>
-			<Tool
-				Name="VCPostBuildEventTool"
-			/>
-		</Configuration>
-	</Configurations>
-	<References>
-	</References>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx"
-			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
-			>
-			<File
-				RelativePath="blackscholes.simd.c"
-				>
-			</File>
-			<File
-				RelativePath="optionData.txt"
-				>
-			</File>
-		</Filter>
-		<File
-			RelativePath="COPYRIGHT"
-			>
-		</File>
-		<File
-			RelativePath="README"
-			>
-		</File>
-	</Files>
-	<Globals>
-	</Globals>
-</VisualStudioProject>
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.sln blackscholes/blackscholes.sln
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.sln	2021-07-27 19:39:33.980054000 -0700
+++ blackscholes/blackscholes.sln	1969-12-31 16:00:00.000000000 -0800
@@ -1,32 +0,0 @@
-﻿
-Microsoft Visual Studio Solution File, Format Version 9.00
-# Visual Studio 2005
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "blackscholes", "blackscholes.vcproj", "{08EBD705-88D0-4CCF-9F6C-664275BA3DE6}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "blackscholes.simd", "blackscholes.simd.vcproj", "{8DF343BB-A8BD-451B-B01D-4C879C34B667}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "blackscholes.tbb", "blackscholes.tbb.vcproj", "{990646E6-3C71-4649-AE00-65C64FF50755}"
-EndProject
-Global
-	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-		Debug|Win32 = Debug|Win32
-		Release|Win32 = Release|Win32
-	EndGlobalSection
-	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{08EBD705-88D0-4CCF-9F6C-664275BA3DE6}.Debug|Win32.ActiveCfg = Debug|Win32
-		{08EBD705-88D0-4CCF-9F6C-664275BA3DE6}.Debug|Win32.Build.0 = Debug|Win32
-		{08EBD705-88D0-4CCF-9F6C-664275BA3DE6}.Release|Win32.ActiveCfg = Release|Win32
-		{08EBD705-88D0-4CCF-9F6C-664275BA3DE6}.Release|Win32.Build.0 = Release|Win32
-		{8DF343BB-A8BD-451B-B01D-4C879C34B667}.Debug|Win32.ActiveCfg = Debug|Win32
-		{8DF343BB-A8BD-451B-B01D-4C879C34B667}.Debug|Win32.Build.0 = Debug|Win32
-		{8DF343BB-A8BD-451B-B01D-4C879C34B667}.Release|Win32.ActiveCfg = Release|Win32
-		{8DF343BB-A8BD-451B-B01D-4C879C34B667}.Release|Win32.Build.0 = Release|Win32
-		{990646E6-3C71-4649-AE00-65C64FF50755}.Debug|Win32.ActiveCfg = Debug|Win32
-		{990646E6-3C71-4649-AE00-65C64FF50755}.Debug|Win32.Build.0 = Debug|Win32
-		{990646E6-3C71-4649-AE00-65C64FF50755}.Release|Win32.ActiveCfg = Release|Win32
-		{990646E6-3C71-4649-AE00-65C64FF50755}.Release|Win32.Build.0 = Release|Win32
-	EndGlobalSection
-	GlobalSection(SolutionProperties) = preSolution
-		HideSolutionNode = FALSE
-	EndGlobalSection
-EndGlobal
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.vcproj blackscholes/blackscholes.vcproj
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/blackscholes.vcproj	2021-07-27 19:39:33.972058000 -0700
+++ blackscholes/blackscholes.vcproj	1969-12-31 16:00:00.000000000 -0800
@@ -1,199 +0,0 @@
-<?xml version="1.0" encoding="Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="8.00"
-	Name="blackscholes"
-	ProjectGUID="{08EBD705-88D0-4CCF-9F6C-664275BA3DE6}"
-	RootNamespace="blackscholes"
-	Keyword="Win32Proj"
-	>
-	<Platforms>
-		<Platform
-			Name="Win32"
-		/>
-	</Platforms>
-	<ToolFiles>
-	</ToolFiles>
-	<Configurations>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
-			IntermediateDirectory="$(ConfigurationName)"
-			ConfigurationType="1"
-			CharacterSet="1"
-			>
-			<Tool
-				Name="VCPreBuildEventTool"
-			/>
-			<Tool
-				Name="VCCustomBuildTool"
-			/>
-			<Tool
-				Name="VCXMLDataGeneratorTool"
-			/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"
-			/>
-			<Tool
-				Name="VCMIDLTool"
-			/>
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE"
-				MinimalRebuild="true"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				UsePrecompiledHeader="0"
-				ExpandAttributedSource="true"
-				WarningLevel="3"
-				Detect64BitPortabilityProblems="true"
-				DebugInformationFormat="4"
-			/>
-			<Tool
-				Name="VCManagedResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCPreLinkEventTool"
-			/>
-			<Tool
-				Name="VCLinkerTool"
-				LinkIncremental="2"
-				GenerateDebugInformation="true"
-				SubSystem="1"
-				TargetMachine="1"
-			/>
-			<Tool
-				Name="VCALinkTool"
-			/>
-			<Tool
-				Name="VCManifestTool"
-			/>
-			<Tool
-				Name="VCXDCMakeTool"
-			/>
-			<Tool
-				Name="VCBscMakeTool"
-			/>
-			<Tool
-				Name="VCFxCopTool"
-			/>
-			<Tool
-				Name="VCAppVerifierTool"
-			/>
-			<Tool
-				Name="VCWebDeploymentTool"
-			/>
-			<Tool
-				Name="VCPostBuildEventTool"
-			/>
-		</Configuration>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
-			IntermediateDirectory="$(ConfigurationName)"
-			ConfigurationType="1"
-			CharacterSet="1"
-			WholeProgramOptimization="1"
-			>
-			<Tool
-				Name="VCPreBuildEventTool"
-			/>
-			<Tool
-				Name="VCCustomBuildTool"
-			/>
-			<Tool
-				Name="VCXMLDataGeneratorTool"
-			/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"
-			/>
-			<Tool
-				Name="VCMIDLTool"
-			/>
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="3"
-				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE"
-				RuntimeLibrary="2"
-				UsePrecompiledHeader="0"
-				WarningLevel="3"
-				Detect64BitPortabilityProblems="true"
-				DebugInformationFormat="3"
-			/>
-			<Tool
-				Name="VCManagedResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCResourceCompilerTool"
-			/>
-			<Tool
-				Name="VCPreLinkEventTool"
-			/>
-			<Tool
-				Name="VCLinkerTool"
-				LinkIncremental="1"
-				GenerateDebugInformation="true"
-				SubSystem="1"
-				OptimizeReferences="2"
-				EnableCOMDATFolding="2"
-				TargetMachine="1"
-			/>
-			<Tool
-				Name="VCALinkTool"
-			/>
-			<Tool
-				Name="VCManifestTool"
-			/>
-			<Tool
-				Name="VCXDCMakeTool"
-			/>
-			<Tool
-				Name="VCBscMakeTool"
-			/>
-			<Tool
-				Name="VCFxCopTool"
-			/>
-			<Tool
-				Name="VCAppVerifierTool"
-			/>
-			<Tool
-				Name="VCWebDeploymentTool"
-			/>
-			<Tool
-				Name="VCPostBuildEventTool"
-			/>
-		</Configuration>
-	</Configurations>
-	<References>
-	</References>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx"
-			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
-			>
-			<File
-				RelativePath="blackscholes.c"
-				>
-			</File>
-			<File
-				RelativePath="optionData.txt"
-				>
-			</File>
-		</Filter>
-		<File
-			RelativePath="COPYRIGHT"
-			>
-		</File>
-		<File
-			RelativePath="README"
-			>
-		</File>
-	</Files>
-	<Globals>
-	</Globals>
-</VisualStudioProject>
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/c.m4.pthreads blackscholes/c.m4.pthreads
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/c.m4.pthreads	2021-07-27 19:39:33.990055000 -0700
+++ blackscholes/c.m4.pthreads	1969-12-31 16:00:00.000000000 -0800
@@ -1,122 +0,0 @@
-define(EXTERN_ENV,
-`
-#include <time.h>
-
-extern pthread_t _M4_threads[MAX_THREADS];
-extern pthread_mutexattr_t _M4_normalMutexAttr;
-extern int _M4_numThreads;
-')
-
-define(MAIN_ENV, 
-`
-#ifdef _XOPEN_SOURCE
-#undef _XOPEN_SOURCE
-#define _XOPEN_SOURCE 700
-#endif
-#ifndef _GNU_SOURCE
-#define _GNU_SOURCE
-#endif
-#ifndef __USE_XOPEN2K
-#define __USE_XOPEN2K
-#endif
-#ifndef __USE_UNIX98
-#define __USE_UNIX98
-#endif
-#include <pthread.h>
-#include <time.h>
-
-#define MAX_THREADS 128
-
-pthread_t _M4_threadsTable[MAX_THREADS];
-int _M4_threadsTableAllocated[MAX_THREADS];
-pthread_mutexattr_t _M4_normalMutexAttr;
-int _M4_numThreads = MAX_THREADS;
-')
-
-define(MAIN_INITENV, `
-    pthread_mutexattr_init( &_M4_normalMutexAttr);
-//    pthread_mutexattr_settype( &_M4_normalMutexAttr, PTHREAD_MUTEX_NORMAL);
-    _M4_numThreads = $3;
-    {
-        int _M4_i;
-        for ( _M4_i = 0; _M4_i < MAX_THREADS; _M4_i++) {
-            _M4_threadsTableAllocated[_M4_i] = 0;
-        }
-    }
-')
-define(MAIN_END, `')
-
-
-define(CREATE_WITH_ARG, `
-    {
-        int _M4_i;
-        for ( _M4_i = 0; _M4_i < MAX_THREADS; _M4_i++) {
-            if ( _M4_threadsTableAllocated[_M4_i] == 0)    break;
-        }
-        pthread_create(&_M4_threadsTable[_M4_i],NULL,(void *(*)(void *))$1,(void *)$2);
-        _M4_threadsTableAllocated[_M4_i] = 1;
-    }
-')
-
-define(CREATE, `CREATE_WITH_ARG($1,NULL);')
-
-define(SELF, `( long)pthread_self()')
-
-define(BARDEC, `pthread_barrier_t $1;')
-define(BARINIT, `pthread_barrier_init(&($1),NULL,_M4_numThreads);')
-define(BARRIER, `pthread_barrier_wait(&($1))')
-
-define(LOCKDEC,  `pthread_mutex_t $1;')
-define(LOCKINIT, `pthread_mutex_init(&($1),  &_M4_normalMutexAttr);')
-define(LOCK,     `pthread_mutex_lock(&($1));')
-define(UNLOCK,   `pthread_mutex_unlock(&($1));')
-
-define(LOCKRDEC,  `pthread_mutex_t $1;')
-define(LOCKRINIT, `pthread_mutex_init(&($1), NULL);')
-define(LOCKR,     `pthread_mutex_lock(&($1));')
-define(UNLOCKR,   `pthread_mutex_unlock(&($1));')
-
-define(CVDEC,        `pthread_cond_t $1;')
-define(CVINIT,       `pthread_cond_init(&$1,NULL);')
-define(CVWAIT,       `pthread_cond_wait(&$1,&$2);')
-define(CVWAITREL,    `pthread_cond_wait(&$1,&$2);  pthread_mutex_unlock(&$2);')
-define(CVSIGNALALL,  `pthread_cond_broadcast(&$1);')
-define(CVSIGNALONE,  `pthread_cond_signal(&$1);')
-
-define(ACQUIRE,  `pthread_mutex_lock(&($1));')
-define(RELEASE,  `pthread_mutex_unlock(&($1));')
-
-define(ALOCKDEC,  `pthread_mutex_t ($1[$2]);')
-define(ALOCKINIT, `{
-                      int _M4_loop_j;
-                      for(_M4_loop_j=0; _M4_loop_j < $2; _M4_loop_j++){
-                          pthread_mutex_init((pthread_mutex_t*)&($1[_M4_loop_j]), NULL);
-                      }
-                   }')
-define(ALOCK,      `pthread_mutex_lock((pthread_mutex_t*)&($1[$2]));')
-define(AULOCK,     `pthread_mutex_unlock((pthread_mutex_t*)&($1[$2]));')
-
-define(AACQUIRE,   `pthread_mutex_lock(&($1[$2]));')
-define(ARELEASE,   `pthread_mutex_unlock(&($1[$2]));')
-
-define(WAIT_FOR_END, `
-    {
-        int _M4_i;
-        void *_M4_ret;
-        for ( _M4_i = 0; _M4_i < MAX_THREADS;_M4_i++) {
-            if ( _M4_threadsTableAllocated[_M4_i] == 0)    break;
-            pthread_join( _M4_threadsTable[_M4_i], &_M4_ret);
-        }
-    }
-')
-define(JOIN, `{pthread_join( _M4_threadsTable[($1)], NULL );}')
-
-define(CLOCK, `{long time(); ($1) = time(0);}')
-
-define(GET_PID, `$1 = pthread_self();')
-define(AUG_ON, `')
-define(AUG_OFF, `')
-
-define(G_MALLOC, `malloc($1);')
-define(MALLOC, `malloc($1);')
-
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/inputgen.c blackscholes/inputgen.c
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/inputgen.c	2021-07-27 19:39:33.976055000 -0700
+++ blackscholes/inputgen.c	1969-12-31 16:00:00.000000000 -0800
@@ -1,85 +0,0 @@
-//Copyright (c) 2009 Princeton University
-//Written by Christian Bienia
-//Generate input files for blackscholes benchmark
-
-#include <stdio.h>
-#include <stdlib.h>
-
-
-
-//Precision to use
-#define fptype double
-
-typedef struct OptionData_ {
-        fptype s;          // spot price
-        fptype strike;     // strike price
-        fptype r;          // risk-free interest rate
-        fptype divq;       // dividend rate
-        fptype v;          // volatility
-        fptype t;          // time to maturity or option expiration in years 
-                           //     (1yr = 1.0, 6mos = 0.5, 3mos = 0.25, ..., etc)  
-        const char *OptionType;  // Option type.  "P"=PUT, "C"=CALL
-        fptype divs;       // dividend vals (not used in this test)
-        fptype DGrefval;   // DerivaGem Reference Value
-} OptionData;
-
-//Total number of options in optionData.txt
-#define MAX_OPTIONS 1000
-
-OptionData data_init[] = {
-    #include "optionData.txt"
-};
-
-
-
-int main (int argc, char **argv) {
-  int numOptions;
-  char *fileName;
-  int rv;
-  int i;
-
-  if (argc != 3) {
-    printf("Usage:\n\t%s <numOptions> <fileName>\n", argv[0]);
-    exit(1);
-  }
-  numOptions = atoi(argv[1]);
-  fileName = argv[2];
-  if(numOptions < 1) {
-    printf("ERROR: Number of options must at least be 1.\n");
-    exit(1);
-  }
-
-  FILE *file;
-  file = fopen(fileName, "w");
-  if(file == NULL) {
-    printf("ERROR: Unable to open file `%s'.\n", fileName);
-    exit(1);
-  }
-
-  //write number of options
-  rv = fprintf(file, "%i\n", numOptions);
-  if(rv < 0) {
-    printf("ERROR: Unable to write to file `%s'.\n", fileName);
-    fclose(file);
-    exit(1);
-  }
-
-  //write values for options
-  for(i=0; i<numOptions; i++) {
-    //NOTE: DG RefValues specified exceed double precision, output will deviate
-    rv = fprintf(file, "%.2f %.2f %.4f %.2f %.2f %.2f %c %.2f %.18f\n", data_init[i % MAX_OPTIONS].s, data_init[i % MAX_OPTIONS].strike, data_init[i % MAX_OPTIONS].r, data_init[i % MAX_OPTIONS].divq, data_init[i % MAX_OPTIONS].v, data_init[i % MAX_OPTIONS].t, data_init[i % MAX_OPTIONS].OptionType[0], data_init[i % MAX_OPTIONS].divs, data_init[i % MAX_OPTIONS].DGrefval);
-    if(rv < 0) {
-      printf("ERROR: Unable to write to file `%s'.\n", fileName);
-      fclose(file);
-      exit(1);
-    }
-  }
-
-  rv = fclose(file);
-  if(rv != 0) {
-    printf("ERROR: Unable to close file `%s'.\n", fileName);
-    exit(1);
-  }
-
-  return 0;
-}
diff -Naur ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/optionData.txt blackscholes/optionData.txt
--- ../original_src/parsec-3.0/pkgs/apps/blackscholes/src/optionData.txt	2021-07-27 19:39:33.986063000 -0700
+++ blackscholes/optionData.txt	1969-12-31 16:00:00.000000000 -0800
@@ -1,1004 +0,0 @@
-//    #include file of test data inpout params and DerivaGem control reference value
-//
-// S,     K,      r,        q,      vol,    T,     P/C,    Divs,        DG RefValue
-
-{42.00,   40.00,  0.1000,   0.00,   0.20,   0.50,   "C",   0.00,   4.759423036851750000},
-{42.00,   40.00,  0.1000,   0.00,   0.20,   0.50,   "P",   0.00,   0.808600016880314000},
-{100.00,   100.00,  0.0500,   0.00,   0.15,   1.00,   "P",   0.00,   3.714602051381290000},
-{100.00,   100.00,  0.0500,   0.00,   0.15,   1.00,   "C",   0.00,   8.591659601309890000},
-{60.00,   65.00,  0.0800,   0.00,   0.30,   0.25,   "C",   0.00,   2.133371966735750000},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   0.10,   "C",   0.00,   10.895610714794000000},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   0.50,   "C",   0.00,   14.421570828843300000},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   1.00,   "C",   0.00,   18.630859120667500000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   0.10,   "C",   0.00,   1.814984118378420000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   0.50,   "C",   0.00,   5.850273604284980000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   1.00,   "C",   0.00,   10.308147243666800000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   0.10,   "C",   0.00,   0.003523074865584340},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   0.50,   "C",   0.00,   1.140722843827410000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   1.00,   "C",   0.00,   4.216747020308850000},
-{100.00,   90.00,  0.1000,   0.00,   0.25,   0.10,   "C",   0.00,   11.135244618346700000},
-{100.00,   90.00,  0.1000,   0.00,   0.25,   0.50,   "C",   0.00,   16.092638844092300000},
-{100.00,   90.00,  0.1000,   0.00,   0.25,   1.00,   "C",   0.00,   21.163454658480100000},
-{100.00,   100.00,  0.1000,   0.00,   0.25,   0.10,   "C",   0.00,   3.659962660310000000},
-{100.00,   100.00,  0.1000,   0.00,   0.25,   0.50,   "C",   0.00,   9.582231441086730000},
-{100.00,   100.00,  0.1000,   0.00,   0.25,   1.00,   "C",   0.00,   14.975798441718900000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   0.10,   "C",   0.00,   0.589613262035413000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   0.50,   "C",   0.00,   5.123575416865320000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   1.00,   "C",   0.00,   10.160055944516600000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   12.919509619564700000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   21.438280655724400000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   28.643647264488200000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   6.779936664291260000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   16.263193147074300000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   23.926745214162700000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   3.061909566605540000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   12.155688815568700000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   19.929858372066300000},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   0.000095752219082624},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   0.032219033907538300},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   0.066226743903883000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   0.819967493295226000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   0.973216054356396000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   0.791889047262800000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   8.909004787274070000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   5.775959538905960000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   3.748863004264400000},
-{100.00,   90.00,  0.1000,   0.00,   0.25,   0.10,   "P",   0.00,   0.239729655771796000},
-{100.00,   90.00,  0.1000,   0.00,   0.25,   0.50,   "P",   0.00,   1.703287049156570000},
-{100.00,   90.00,  0.1000,   0.00,   0.25,   1.00,   "P",   0.00,   2.598822281716470000},
-{100.00,   100.00,  0.1000,   0.00,   0.25,   0.10,   "P",   0.00,   2.664946035226810000},
-{100.00,   100.00,  0.1000,   0.00,   0.25,   0.50,   "P",   0.00,   4.705173891158130000},
-{100.00,   100.00,  0.1000,   0.00,   0.25,   1.00,   "P",   0.00,   5.459540245314840000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   0.10,   "P",   0.00,   9.495094974443900000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   0.50,   "P",   0.00,   9.758812111943870000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   1.00,   "P",   0.00,   9.692171928472170000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   0.10,   "P",   0.00,   2.023994656989830000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   0.50,   "P",   0.00,   7.048928860788620000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   1.00,   "P",   0.00,   10.079014887724600000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   0.10,   "P",   0.00,   5.784920039208060000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   0.50,   "P",   0.00,   11.386135597145700000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   1.00,   "P",   0.00,   14.410487017758700000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   0.10,   "P",   0.00,   11.967391279014000000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   0.50,   "P",   0.00,   16.790925510647200000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   1.00,   "P",   0.00,   19.461974356021900000},
-{50.00,   41.25,  0.1000,   0.00,   0.10,   0.10,   "C",   0.00,   9.160444357863210000},
-{50.00,   41.25,  0.1000,   0.00,   0.10,   0.50,   "C",   0.00,   10.762029464848100000},
-{50.00,   41.25,  0.1000,   0.00,   0.10,   1.00,   "C",   0.00,   12.677609097740100000},
-{50.00,   50.00,  0.1000,   0.00,   0.10,   0.10,   "C",   0.00,   0.907492059189209000},
-{50.00,   50.00,  0.1000,   0.00,   0.10,   0.50,   "C",   0.00,   2.925136802142490000},
-{50.00,   50.00,  0.1000,   0.00,   0.10,   1.00,   "C",   0.00,   5.154073621833420000},
-{50.00,   60.75,  0.1000,   0.00,   0.10,   0.10,   "C",   0.00,   0.000000000717454849},
-{50.00,   60.75,  0.1000,   0.00,   0.10,   0.50,   "C",   0.00,   0.028414779953288100},
-{50.00,   60.75,  0.1000,   0.00,   0.10,   1.00,   "C",   0.00,   0.481908128709845000},
-{50.00,   41.25,  0.1000,   0.00,   0.25,   0.10,   "C",   0.00,   9.166378741739160000},
-{50.00,   41.25,  0.1000,   0.00,   0.25,   0.50,   "C",   0.00,   11.066856943917300000},
-{50.00,   41.25,  0.1000,   0.00,   0.25,   1.00,   "C",   0.00,   13.316909764810900000},
-{50.00,   50.00,  0.1000,   0.00,   0.25,   0.10,   "C",   0.00,   1.829981330155000000},
-{50.00,   50.00,  0.1000,   0.00,   0.25,   0.50,   "C",   0.00,   4.791115720543370000},
-{50.00,   50.00,  0.1000,   0.00,   0.25,   1.00,   "C",   0.00,   7.487899220859440000},
-{50.00,   60.75,  0.1000,   0.00,   0.25,   0.10,   "C",   0.00,   0.014232371738726200},
-{50.00,   60.75,  0.1000,   0.00,   0.25,   0.50,   "C",   0.00,   1.102318710852480000},
-{50.00,   60.75,  0.1000,   0.00,   0.25,   1.00,   "C",   0.00,   3.104764376468200000},
-{50.00,   41.25,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   9.499149830045080000},
-{50.00,   41.25,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   13.034624930353100000},
-{50.00,   41.25,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   16.348279176395100000},
-{50.00,   50.00,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   3.389968332145630000},
-{50.00,   50.00,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   8.131596573537150000},
-{50.00,   50.00,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   11.963372607081400000},
-{50.00,   60.75,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   0.517721140543361000},
-{50.00,   60.75,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   4.285755504631100000},
-{50.00,   60.75,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   8.058110917563740000},
-{50.00,   41.25,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   0.000000000016396475},
-{50.00,   41.25,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   0.000243225502595658},
-{50.00,   41.25,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   0.002152591723420370},
-{50.00,   50.00,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   0.409983746647613000},
-{50.00,   50.00,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   0.486608027178198000},
-{50.00,   50.00,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   0.395944523631400000},
-{50.00,   60.75,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   10.145527400979400000},
-{50.00,   60.75,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   7.815602318371660000},
-{50.00,   60.75,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   5.450781274394380000},
-{50.00,   41.25,  0.1000,   0.00,   0.25,   0.10,   "P",   0.00,   0.005934383892338090},
-{50.00,   41.25,  0.1000,   0.00,   0.25,   0.50,   "P",   0.00,   0.305070704571745000},
-{50.00,   41.25,  0.1000,   0.00,   0.25,   1.00,   "P",   0.00,   0.641453258794187000},
-{50.00,   50.00,  0.1000,   0.00,   0.25,   0.10,   "P",   0.00,   1.332473017613400000},
-{50.00,   50.00,  0.1000,   0.00,   0.25,   0.50,   "P",   0.00,   2.352586945579070000},
-{50.00,   50.00,  0.1000,   0.00,   0.25,   1.00,   "P",   0.00,   2.729770122657420000},
-{50.00,   60.75,  0.1000,   0.00,   0.25,   0.10,   "P",   0.00,   10.159759772000700000},
-{50.00,   60.75,  0.1000,   0.00,   0.25,   0.50,   "P",   0.00,   8.889506249270860000},
-{50.00,   60.75,  0.1000,   0.00,   0.25,   1.00,   "P",   0.00,   8.073637522152740000},
-{50.00,   41.25,  0.1000,   0.00,   0.50,   0.10,   "P",   0.00,   0.338705472198261000},
-{50.00,   41.25,  0.1000,   0.00,   0.50,   0.50,   "P",   0.00,   2.272838691007510000},
-{50.00,   41.25,  0.1000,   0.00,   0.50,   1.00,   "P",   0.00,   3.672822670378400000},
-{50.00,   50.00,  0.1000,   0.00,   0.50,   0.10,   "P",   0.00,   2.892460019604030000},
-{50.00,   50.00,  0.1000,   0.00,   0.50,   0.50,   "P",   0.00,   5.693067798572860000},
-{50.00,   50.00,  0.1000,   0.00,   0.50,   1.00,   "P",   0.00,   7.205243508879350000},
-{50.00,   60.75,  0.1000,   0.00,   0.50,   0.10,   "P",   0.00,   10.663248540805300000},
-{50.00,   60.75,  0.1000,   0.00,   0.50,   0.50,   "P",   0.00,   12.072943043049500000},
-{50.00,   60.75,  0.1000,   0.00,   0.50,   1.00,   "P",   0.00,   13.026984063248300000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.10,   "C",   0.00,   10.247401000886400000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.50,   "C",   0.00,   11.355496680087600000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   1.00,   "C",   0.00,   12.841685844358700000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.10,   "C",   0.00,   1.401851512188630000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.50,   "C",   0.00,   3.536661968725870000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   1.00,   "C",   0.00,   5.437616879373150000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.10,   "C",   0.00,   0.001633213370202900},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.50,   "C",   0.00,   0.454070380213948000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   1.00,   "C",   0.00,   1.532588879532600000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.10,   "C",   0.00,   10.541889432392700000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.50,   "C",   0.00,   13.710780949068900000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   1.00,   "C",   0.00,   16.827677195009300000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.10,   "C",   0.00,   3.287983325881400000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.50,   "C",   0.00,   7.698994752653710000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   1.00,   "C",   0.00,   11.227983057006400000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.10,   "C",   0.00,   0.492789615196492000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.50,   "C",   0.00,   3.858921644731480000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   1.00,   "C",   0.00,   7.162832542185690000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.10,   "C",   0.00,   12.443070129340600000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.50,   "C",   0.00,   19.594067641915700000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   1.00,   "C",   0.00,   25.369048485340600000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.10,   "C",   0.00,   6.430883891711170000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.50,   "C",   0.00,   14.629031944250100000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   1.00,   "C",   0.00,   20.858610524946800000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.10,   "C",   0.00,   2.855401894418240000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.50,   "C",   0.00,   10.762095702746800000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   1.00,   "C",   0.00,   17.109364250968300000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.10,   "P",   0.00,   0.000241001647596191},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.50,   "P",   0.00,   0.126465632121558000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   1.00,   "P",   0.00,   0.400407274169526000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.10,   "P",   0.00,   1.127229290812220000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.50,   "P",   0.00,   2.171071915430270000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   1.00,   "P",   0.00,   2.725085134718540000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.10,   "P",   0.00,   9.699548769856150000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.50,   "P",   0.00,   8.951921321588780000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   1.00,   "P",   0.00,   8.548803960412530000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.10,   "P",   0.00,   0.294729433153974000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.50,   "P",   0.00,   2.481749901102830000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   1.00,   "P",   0.00,   4.386398624820130000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.10,   "P",   0.00,   3.013361104504980000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.50,   "P",   0.00,   6.333404699358100000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   1.00,   "P",   0.00,   8.515451312351790000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.10,   "P",   0.00,   10.190705171682400000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.50,   "P",   0.00,   12.356772586106300000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   1.00,   "P",   0.00,   14.179047623065600000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.10,   "P",   0.00,   2.195910130101800000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.50,   "P",   0.00,   8.365036593949600000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   1.00,   "P",   0.00,   12.927769915151500000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.10,   "P",   0.00,   6.156261670334750000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.50,   "P",   0.00,   13.263441890954500000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   1.00,   "P",   0.00,   18.146078780292200000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.10,   "P",   0.00,   12.553317450904200000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.50,   "P",   0.00,   19.259946644121600000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   1.00,   "P",   0.00,   24.125579331848300000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.10,   "C",   0.00,   8.863281666392300000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.50,   "C",   0.00,   9.314944657044040000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   1.00,   "C",   0.00,   9.890867970305360000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.10,   "C",   0.00,   0.700925756094317000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.50,   "C",   0.00,   1.768330984362940000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   1.00,   "C",   0.00,   2.718808439686570000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.10,   "C",   0.00,   0.000000000170861147},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.50,   "C",   0.00,   0.006433878180657690},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   1.00,   "C",   0.00,   0.106190314866700000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.10,   "C",   0.00,   8.871203986520360000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.50,   "C",   0.00,   9.791475497647290000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   1.00,   "C",   0.00,   11.030984382704700000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.10,   "C",   0.00,   1.643991662940700000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.50,   "C",   0.00,   3.849497376326850000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   1.00,   "C",   0.00,   5.613991528503190000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.10,   "C",   0.00,   0.010849363947345100},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.50,   "C",   0.00,   0.768274495718033000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   1.00,   "C",   0.00,   2.036957925438520000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.10,   "C",   0.00,   9.237479294160510000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.50,   "C",   0.00,   12.055228107416700000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   1.00,   "C",   0.00,   14.655915985561400000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.10,   "C",   0.00,   3.215441945855580000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.50,   "C",   0.00,   7.314515972125060000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   1.00,   "C",   0.00,   10.429305262473400000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.10,   "C",   0.00,   0.473089228156817000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.50,   "C",   0.00,   3.727049105818880000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   1.00,   "C",   0.00,   6.800854032435260000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.10,   "P",   0.00,   0.000000000074528552},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.50,   "P",   0.00,   0.001638760059608080},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   1.00,   "P",   0.00,   0.021948625635337300},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.10,   "P",   0.00,   0.563614645406109000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.50,   "P",   0.00,   1.085535957715130000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   1.00,   "P",   0.00,   1.362542567359270000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.10,   "P",   0.00,   10.583167000684700000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.50,   "P",   0.00,   9.926837920803580000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   1.00,   "P",   0.00,   9.208327279989030000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.10,   "P",   0.00,   0.007922320202584000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.50,   "P",   0.00,   0.478169600662851000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   1.00,   "P",   0.00,   1.162065038034680000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.10,   "P",   0.00,   1.506680552252490000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.50,   "P",   0.00,   3.166702349679050000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   1.00,   "P",   0.00,   4.257725656175890000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.10,   "P",   0.00,   10.594016364461200000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.50,   "P",   0.00,   10.688678538341000000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   1.00,   "P",   0.00,   11.139094890560900000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.10,   "P",   0.00,   0.374197627842735000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.50,   "P",   0.00,   2.741922210432270000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   1.00,   "P",   0.00,   4.786996640891410000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.10,   "P",   0.00,   3.078130835167380000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.50,   "P",   0.00,   6.631720945477260000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   1.00,   "P",   0.00,   9.073039390146110000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.10,   "P",   0.00,   11.056256228670600000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.50,   "P",   0.00,   13.647453148441800000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   1.00,   "P",   0.00,   15.902990997557600000},
-{100.00,   90.00,  0.0500,   0.00,   0.10,   0.10,   "C",   0.00,   10.449058766801200000},
-{100.00,   90.00,  0.0500,   0.00,   0.10,   0.50,   "C",   0.00,   12.306754042912400000},
-{100.00,   90.00,  0.0500,   0.00,   0.10,   1.00,   "C",   0.00,   14.628840237721800000},
-{100.00,   100.00,  0.0500,   0.00,   0.10,   0.10,   "C",   0.00,   1.523436713687610000},
-{100.00,   100.00,  0.0500,   0.00,   0.10,   0.50,   "C",   0.00,   4.192271110733870000},
-{100.00,   100.00,  0.0500,   0.00,   0.10,   1.00,   "C",   0.00,   6.804962968028710000},
-{100.00,   110.00,  0.0500,   0.00,   0.10,   0.10,   "C",   0.00,   0.002083505050676660},
-{100.00,   110.00,  0.0500,   0.00,   0.10,   0.50,   "C",   0.00,   0.616571484986525000},
-{100.00,   110.00,  0.0500,   0.00,   0.10,   1.00,   "C",   0.00,   2.173950441155820000},
-{100.00,   90.00,  0.0500,   0.00,   0.25,   0.10,   "C",   0.00,   10.725497846854800000},
-{100.00,   90.00,  0.0500,   0.00,   0.25,   0.50,   "C",   0.00,   14.437116290052900000},
-{100.00,   90.00,  0.0500,   0.00,   0.25,   1.00,   "C",   0.00,   18.140770068154800000},
-{100.00,   100.00,  0.0500,   0.00,   0.25,   0.10,   "C",   0.00,   3.400893835697680000},
-{100.00,   100.00,  0.0500,   0.00,   0.25,   0.50,   "C",   0.00,   8.260004605682270000},
-{100.00,   100.00,  0.0500,   0.00,   0.25,   1.00,   "C",   0.00,   12.335986235067200000},
-{100.00,   110.00,  0.0500,   0.00,   0.25,   0.10,   "C",   0.00,   0.521347622182002000},
-{100.00,   110.00,  0.0500,   0.00,   0.25,   0.50,   "C",   0.00,   4.225788960901320000},
-{100.00,   110.00,  0.0500,   0.00,   0.25,   1.00,   "C",   0.00,   8.026371324891460000},
-{100.00,   90.00,  0.0500,   0.00,   0.50,   0.10,   "C",   0.00,   12.590255331551100000},
-{100.00,   90.00,  0.0500,   0.00,   0.50,   0.50,   "C",   0.00,   20.159976068200700000},
-{100.00,   90.00,  0.0500,   0.00,   0.50,   1.00,   "C",   0.00,   26.372713127990200000},
-{100.00,   100.00,  0.0500,   0.00,   0.50,   0.10,   "C",   0.00,   6.538072233170310000},
-{100.00,   100.00,  0.0500,   0.00,   0.50,   0.50,   "C",   0.00,   15.127170180011800000},
-{100.00,   100.00,  0.0500,   0.00,   0.50,   1.00,   "C",   0.00,   21.792596179591700000},
-{100.00,   110.00,  0.0500,   0.00,   0.50,   0.10,   "C",   0.00,   2.918389335831480000},
-{100.00,   110.00,  0.0500,   0.00,   0.50,   0.50,   "C",   0.00,   11.184108264097900000},
-{100.00,   110.00,  0.0500,   0.00,   0.50,   1.00,   "C",   0.00,   17.962314921602000000},
-{100.00,   90.00,  0.0500,   0.00,   0.10,   0.10,   "P",   0.00,   0.000181894142655793},
-{100.00,   90.00,  0.0500,   0.00,   0.10,   0.50,   "P",   0.00,   0.084646125462351500},
-{100.00,   90.00,  0.0500,   0.00,   0.10,   1.00,   "P",   0.00,   0.239488442786030000},
-{100.00,   100.00,  0.0500,   0.00,   0.10,   0.10,   "P",   0.00,   1.024684632955850000},
-{100.00,   100.00,  0.0500,   0.00,   0.10,   0.50,   "P",   0.00,   1.723262313567130000},
-{100.00,   100.00,  0.0500,   0.00,   0.10,   1.00,   "P",   0.00,   1.927905418100120000},
-{100.00,   110.00,  0.0500,   0.00,   0.10,   0.10,   "P",   0.00,   9.453456216245730000},
-{100.00,   110.00,  0.0500,   0.00,   0.10,   0.50,   "P",   0.00,   7.900661808103120000},
-{100.00,   110.00,  0.0500,   0.00,   0.10,   1.00,   "P",   0.00,   6.809187136234370000},
-{100.00,   90.00,  0.0500,   0.00,   0.25,   0.10,   "P",   0.00,   0.276620974196225000},
-{100.00,   90.00,  0.0500,   0.00,   0.25,   0.50,   "P",   0.00,   2.215008372602800000},
-{100.00,   90.00,  0.0500,   0.00,   0.25,   1.00,   "P",   0.00,   3.751418273219090000},
-{100.00,   100.00,  0.0500,   0.00,   0.25,   0.10,   "P",   0.00,   2.902141754965910000},
-{100.00,   100.00,  0.0500,   0.00,   0.25,   0.50,   "P",   0.00,   5.790995808515530000},
-{100.00,   100.00,  0.0500,   0.00,   0.25,   1.00,   "P",   0.00,   7.458928685138570000},
-{100.00,   110.00,  0.0500,   0.00,   0.25,   0.10,   "P",   0.00,   9.972720333377050000},
-{100.00,   110.00,  0.0500,   0.00,   0.25,   0.50,   "P",   0.00,   11.509879284017900000},
-{100.00,   110.00,  0.0500,   0.00,   0.25,   1.00,   "P",   0.00,   12.661608019970000000},
-{100.00,   90.00,  0.0500,   0.00,   0.50,   0.10,   "P",   0.00,   2.141378458892470000},
-{100.00,   90.00,  0.0500,   0.00,   0.50,   0.50,   "P",   0.00,   7.937868150750600000},
-{100.00,   90.00,  0.0500,   0.00,   0.50,   1.00,   "P",   0.00,   11.983361333054400000},
-{100.00,   100.00,  0.0500,   0.00,   0.50,   0.10,   "P",   0.00,   6.039320152438550000},
-{100.00,   100.00,  0.0500,   0.00,   0.50,   0.50,   "P",   0.00,   12.658161382845000000},
-{100.00,   100.00,  0.0500,   0.00,   0.50,   1.00,   "P",   0.00,   16.915538629663100000},
-{100.00,   110.00,  0.0500,   0.00,   0.50,   0.10,   "P",   0.00,   12.369762047026500000},
-{100.00,   110.00,  0.0500,   0.00,   0.50,   0.50,   "P",   0.00,   18.468198587214500000},
-{100.00,   110.00,  0.0500,   0.00,   0.50,   1.00,   "P",   0.00,   22.597551616680500000},
-{50.00,   41.25,  0.0500,   0.00,   0.10,   0.10,   "C",   0.00,   8.955735233348690000},
-{50.00,   41.25,  0.0500,   0.00,   0.10,   0.50,   "C",   0.00,   9.769395612888870000},
-{50.00,   41.25,  0.0500,   0.00,   0.10,   1.00,   "C",   0.00,   10.772989650176100000},
-{50.00,   50.00,  0.0500,   0.00,   0.10,   0.10,   "C",   0.00,   0.761718356843806000},
-{50.00,   50.00,  0.0500,   0.00,   0.10,   0.50,   "C",   0.00,   2.096135555366940000},
-{50.00,   50.00,  0.0500,   0.00,   0.10,   1.00,   "C",   0.00,   3.402481484014360000},
-{50.00,   60.75,  0.0500,   0.00,   0.10,   0.10,   "C",   0.00,   0.000000000268144541},
-{50.00,   60.75,  0.0500,   0.00,   0.10,   0.50,   "C",   0.00,   0.010446869804788600},
-{50.00,   60.75,  0.0500,   0.00,   0.10,   1.00,   "C",   0.00,   0.177236149710853000},
-{50.00,   41.25,  0.0500,   0.00,   0.25,   0.10,   "C",   0.00,   8.962983694922850000},
-{50.00,   41.25,  0.0500,   0.00,   0.25,   0.50,   "C",   0.00,   10.185792986779500000},
-{50.00,   41.25,  0.0500,   0.00,   0.25,   1.00,   "C",   0.00,   11.734445815449900000},
-{50.00,   50.00,  0.0500,   0.00,   0.25,   0.10,   "C",   0.00,   1.700446917848840000},
-{50.00,   50.00,  0.0500,   0.00,   0.25,   0.50,   "C",   0.00,   4.130002302841130000},
-{50.00,   50.00,  0.0500,   0.00,   0.25,   1.00,   "C",   0.00,   6.167993117533580000},
-{50.00,   60.75,  0.0500,   0.00,   0.25,   0.10,   "C",   0.00,   0.011811829287480400},
-{50.00,   60.75,  0.0500,   0.00,   0.25,   0.50,   "C",   0.00,   0.862122715911549000},
-{50.00,   60.75,  0.0500,   0.00,   0.25,   1.00,   "C",   0.00,   2.335403007584940000},
-{50.00,   41.25,  0.0500,   0.00,   0.50,   0.10,   "C",   0.00,   9.318598550815250000},
-{50.00,   41.25,  0.0500,   0.00,   0.50,   0.50,   "C",   0.00,   12.357234669808300000},
-{50.00,   41.25,  0.0500,   0.00,   0.50,   1.00,   "C",   0.00,   15.177352941362300000},
-{50.00,   50.00,  0.0500,   0.00,   0.50,   0.10,   "C",   0.00,   3.269036116585160000},
-{50.00,   50.00,  0.0500,   0.00,   0.50,   0.50,   "C",   0.00,   7.563585090005880000},
-{50.00,   50.00,  0.0500,   0.00,   0.50,   1.00,   "C",   0.00,   10.896298089795900000},
-{50.00,   60.75,  0.0500,   0.00,   0.50,   0.10,   "C",   0.00,   0.486593922457358000},
-{50.00,   60.75,  0.0500,   0.00,   0.50,   0.50,   "C",   0.00,   3.894991411685940000},
-{50.00,   60.75,  0.0500,   0.00,   0.50,   1.00,   "C",   0.00,   7.178308554843690000},
-{50.00,   41.25,  0.0500,   0.00,   0.10,   0.10,   "P",   0.00,   0.000000000046837154},
-{50.00,   41.25,  0.0500,   0.00,   0.10,   0.50,   "P",   0.00,   0.000929484057595751},
-{50.00,   41.25,  0.0500,   0.00,   0.10,   1.00,   "P",   0.00,   0.011203410830535000},
-{50.00,   50.00,  0.0500,   0.00,   0.10,   0.10,   "P",   0.00,   0.512342316477927000},
-{50.00,   50.00,  0.0500,   0.00,   0.10,   0.50,   "P",   0.00,   0.861631156783567000},
-{50.00,   50.00,  0.0500,   0.00,   0.10,   1.00,   "P",   0.00,   0.963952709050059000},
-{50.00,   60.75,  0.0500,   0.00,   0.10,   0.10,   "P",   0.00,   10.447008111223600000},
-{50.00,   60.75,  0.0500,   0.00,   0.10,   0.50,   "P",   0.00,   9.260524025526000000},
-{50.00,   60.75,  0.0500,   0.00,   0.10,   1.00,   "P",   0.00,   7.964423688129230000},
-{50.00,   41.25,  0.0500,   0.00,   0.25,   0.10,   "P",   0.00,   0.007248461621002290},
-{50.00,   41.25,  0.0500,   0.00,   0.25,   0.50,   "P",   0.00,   0.417326857948239000},
-{50.00,   41.25,  0.0500,   0.00,   0.25,   1.00,   "P",   0.00,   0.972659576104396000},
-{50.00,   50.00,  0.0500,   0.00,   0.25,   0.10,   "P",   0.00,   1.451070877482950000},
-{50.00,   50.00,  0.0500,   0.00,   0.25,   0.50,   "P",   0.00,   2.895497904257770000},
-{50.00,   50.00,  0.0500,   0.00,   0.25,   1.00,   "P",   0.00,   3.729464342569280000},
-{50.00,   60.75,  0.0500,   0.00,   0.25,   0.10,   "P",   0.00,   10.458819940242900000},
-{50.00,   60.75,  0.0500,   0.00,   0.25,   0.50,   "P",   0.00,   10.112199871632800000},
-{50.00,   60.75,  0.0500,   0.00,   0.25,   1.00,   "P",   0.00,   10.122590546003300000},
-{50.00,   41.25,  0.0500,   0.00,   0.50,   0.10,   "P",   0.00,   0.362863317513402000},
-{50.00,   41.25,  0.0500,   0.00,   0.50,   0.50,   "P",   0.00,   2.588768540977020000},
-{50.00,   41.25,  0.0500,   0.00,   0.50,   1.00,   "P",   0.00,   4.415566702016710000},
-{50.00,   50.00,  0.0500,   0.00,   0.50,   0.10,   "P",   0.00,   3.019660076219270000},
-{50.00,   50.00,  0.0500,   0.00,   0.50,   0.50,   "P",   0.00,   6.329080691422510000},
-{50.00,   50.00,  0.0500,   0.00,   0.50,   1.00,   "P",   0.00,   8.457769314831570000},
-{50.00,   60.75,  0.0500,   0.00,   0.50,   0.10,   "P",   0.00,   10.933602033412800000},
-{50.00,   60.75,  0.0500,   0.00,   0.50,   0.50,   "P",   0.00,   13.145068567407200000},
-{50.00,   60.75,  0.0500,   0.00,   0.50,   1.00,   "P",   0.00,   14.965496093262100000},
-{100.00,   90.00,  0.0725,   0.00,   0.10,   0.10,   "C",   0.00,   10.650277050805100000},
-{100.00,   90.00,  0.0725,   0.00,   0.10,   0.50,   "C",   0.00,   13.259583405256500000},
-{100.00,   90.00,  0.0725,   0.00,   0.10,   1.00,   "C",   0.00,   16.431763683443700000},
-{100.00,   100.00,  0.0725,   0.00,   0.10,   0.10,   "C",   0.00,   1.651032126473450000},
-{100.00,   100.00,  0.0725,   0.00,   0.10,   0.50,   "C",   0.00,   4.906253570587790000},
-{100.00,   100.00,  0.0725,   0.00,   0.10,   1.00,   "C",   0.00,   8.313008388939790000},
-{100.00,   110.00,  0.0725,   0.00,   0.10,   0.10,   "C",   0.00,   0.002646197663476990},
-{100.00,   110.00,  0.0725,   0.00,   0.10,   0.50,   "C",   0.00,   0.822087720719597000},
-{100.00,   110.00,  0.0725,   0.00,   0.10,   1.00,   "C",   0.00,   2.984536842326120000},
-{100.00,   90.00,  0.0725,   0.00,   0.25,   0.10,   "C",   0.00,   10.909604363485600000},
-{100.00,   90.00,  0.0725,   0.00,   0.25,   0.50,   "C",   0.00,   15.175519060709600000},
-{100.00,   90.00,  0.0725,   0.00,   0.25,   1.00,   "C",   0.00,   19.485080840813400000},
-{100.00,   100.00,  0.0725,   0.00,   0.25,   0.10,   "C",   0.00,   3.516086538379690000},
-{100.00,   100.00,  0.0725,   0.00,   0.25,   0.50,   "C",   0.00,   8.842399982947430000},
-{100.00,   100.00,  0.0725,   0.00,   0.25,   1.00,   "C",   0.00,   13.495077753475700000},
-{100.00,   110.00,  0.0725,   0.00,   0.25,   0.10,   "C",   0.00,   0.551230670113858000},
-{100.00,   110.00,  0.0725,   0.00,   0.25,   0.50,   "C",   0.00,   4.615616936834760000},
-{100.00,   110.00,  0.0725,   0.00,   0.25,   1.00,   "C",   0.00,   8.950419705313610000},
-{100.00,   90.00,  0.0725,   0.00,   0.50,   0.10,   "C",   0.00,   12.738053154952400000},
-{100.00,   90.00,  0.0725,   0.00,   0.50,   0.50,   "C",   0.00,   20.731790057083300000},
-{100.00,   90.00,  0.0725,   0.00,   0.50,   1.00,   "C",   0.00,   27.388177501336400000},
-{100.00,   100.00,  0.0725,   0.00,   0.50,   0.10,   "C",   0.00,   6.646286959643460000},
-{100.00,   100.00,  0.0725,   0.00,   0.50,   0.50,   "C",   0.00,   15.633506954311800000},
-{100.00,   100.00,  0.0725,   0.00,   0.50,   1.00,   "C",   0.00,   22.743364795607100000},
-{100.00,   110.00,  0.0725,   0.00,   0.50,   0.10,   "C",   0.00,   2.982365532654810000},
-{100.00,   110.00,  0.0725,   0.00,   0.50,   0.50,   "C",   0.00,   11.615595844329000000},
-{100.00,   110.00,  0.0725,   0.00,   0.50,   1.00,   "C",   0.00,   18.835720450407000000},
-{100.00,   90.00,  0.0725,   0.00,   0.10,   0.10,   "P",   0.00,   0.000136657478829508},
-{100.00,   90.00,  0.0725,   0.00,   0.10,   0.50,   "P",   0.00,   0.055508124958985000},
-{100.00,   90.00,  0.0725,   0.00,   0.10,   1.00,   "P",   0.00,   0.137680882868775000},
-{100.00,   100.00,  0.0725,   0.00,   0.10,   0.10,   "P",   0.00,   0.928653911666424000},
-{100.00,   100.00,  0.0725,   0.00,   0.10,   0.50,   "P",   0.00,   1.346169925812750000},
-{100.00,   100.00,  0.0725,   0.00,   0.10,   1.00,   "P",   0.00,   1.319583054967650000},
-{100.00,   110.00,  0.0725,   0.00,   0.10,   0.10,   "P",   0.00,   9.208030161375750000},
-{100.00,   110.00,  0.0725,   0.00,   0.10,   0.50,   "P",   0.00,   6.905995711467040000},
-{100.00,   110.00,  0.0725,   0.00,   0.10,   1.00,   "P",   0.00,   5.291768974956740000},
-{100.00,   90.00,  0.0725,   0.00,   0.25,   0.10,   "P",   0.00,   0.259463970159300000},
-{100.00,   90.00,  0.0725,   0.00,   0.25,   0.50,   "P",   0.00,   1.971443780412030000},
-{100.00,   90.00,  0.0725,   0.00,   0.25,   1.00,   "P",   0.00,   3.190998040238420000},
-{100.00,   100.00,  0.0725,   0.00,   0.25,   0.10,   "P",   0.00,   2.793708323572660000},
-{100.00,   100.00,  0.0725,   0.00,   0.25,   0.50,   "P",   0.00,   5.282316338172380000},
-{100.00,   100.00,  0.0725,   0.00,   0.25,   1.00,   "P",   0.00,   6.501652419503520000},
-{100.00,   110.00,  0.0725,   0.00,   0.25,   0.10,   "P",   0.00,   9.756614633826140000},
-{100.00,   110.00,  0.0725,   0.00,   0.25,   0.50,   "P",   0.00,   10.699524927582200000},
-{100.00,   110.00,  0.0725,   0.00,   0.25,   1.00,   "P",   0.00,   11.257651837944200000},
-{100.00,   90.00,  0.0725,   0.00,   0.50,   0.10,   "P",   0.00,   2.087912761626100000},
-{100.00,   90.00,  0.0725,   0.00,   0.50,   0.50,   "P",   0.00,   7.527714776785730000},
-{100.00,   90.00,  0.0725,   0.00,   0.50,   1.00,   "P",   0.00,   11.094094700761500000},
-{100.00,   100.00,  0.0725,   0.00,   0.50,   0.10,   "P",   0.00,   5.923908744836440000},
-{100.00,   100.00,  0.0725,   0.00,   0.50,   0.50,   "P",   0.00,   12.073423309536700000},
-{100.00,   100.00,  0.0725,   0.00,   0.50,   1.00,   "P",   0.00,   15.749939461634900000},
-{100.00,   110.00,  0.0725,   0.00,   0.50,   0.10,   "P",   0.00,   12.187749496367100000},
-{100.00,   110.00,  0.0725,   0.00,   0.50,   0.50,   "P",   0.00,   17.699503835076500000},
-{100.00,   110.00,  0.0725,   0.00,   0.50,   1.00,   "P",   0.00,   21.142952583037700000},
-{50.00,   41.25,  0.0725,   0.00,   0.10,   0.10,   "C",   0.00,   9.047981013637180000},
-{50.00,   41.25,  0.0725,   0.00,   0.10,   0.50,   "C",   0.00,   10.219050011000600000},
-{50.00,   41.25,  0.0725,   0.00,   0.10,   1.00,   "C",   0.00,   11.640265602712700000},
-{50.00,   50.00,  0.0725,   0.00,   0.10,   0.10,   "C",   0.00,   0.825516063236724000},
-{50.00,   50.00,  0.0725,   0.00,   0.10,   0.50,   "C",   0.00,   2.453126785293900000},
-{50.00,   50.00,  0.0725,   0.00,   0.10,   1.00,   "C",   0.00,   4.156504194469900000},
-{50.00,   60.75,  0.0725,   0.00,   0.10,   0.10,   "C",   0.00,   0.000000000418787169},
-{50.00,   60.75,  0.0725,   0.00,   0.10,   0.50,   "C",   0.00,   0.016602183429001500},
-{50.00,   60.75,  0.0725,   0.00,   0.10,   1.00,   "C",   0.00,   0.284483121731959000},
-{50.00,   41.25,  0.0725,   0.00,   0.25,   0.10,   "C",   0.00,   9.054608341813460000},
-{50.00,   41.25,  0.0725,   0.00,   0.25,   0.50,   "C",   0.00,   10.581658197115100000},
-{50.00,   41.25,  0.0725,   0.00,   0.25,   1.00,   "C",   0.00,   12.444199535517000000},
-{50.00,   50.00,  0.0725,   0.00,   0.25,   0.10,   "C",   0.00,   1.758043269189840000},
-{50.00,   50.00,  0.0725,   0.00,   0.25,   0.50,   "C",   0.00,   4.421199991473710000},
-{50.00,   50.00,  0.0725,   0.00,   0.25,   1.00,   "C",   0.00,   6.747538876737840000},
-{50.00,   60.75,  0.0725,   0.00,   0.25,   0.10,   "C",   0.00,   0.012850834682157100},
-{50.00,   60.75,  0.0725,   0.00,   0.25,   0.50,   "C",   0.00,   0.964632352153436000},
-{50.00,   60.75,  0.0725,   0.00,   0.25,   1.00,   "C",   0.00,   2.663220686150450000},
-{50.00,   41.25,  0.0725,   0.00,   0.50,   0.10,   "C",   0.00,   9.399799864285060000},
-{50.00,   41.25,  0.0725,   0.00,   0.50,   0.50,   "C",   0.00,   12.661052853996300000},
-{50.00,   41.25,  0.0725,   0.00,   0.50,   1.00,   "C",   0.00,   15.702432182518300000},
-{50.00,   50.00,  0.0725,   0.00,   0.50,   0.10,   "C",   0.00,   3.323143479821730000},
-{50.00,   50.00,  0.0725,   0.00,   0.50,   0.50,   "C",   0.00,   7.816753477155890000},
-{50.00,   50.00,  0.0725,   0.00,   0.50,   1.00,   "C",   0.00,   11.371682397803500000},
-{50.00,   60.75,  0.0725,   0.00,   0.50,   0.10,   "C",   0.00,   0.500408614730964000},
-{50.00,   60.75,  0.0725,   0.00,   0.50,   0.50,   "C",   0.00,   4.067835234635260000},
-{50.00,   60.75,  0.0725,   0.00,   0.50,   1.00,   "C",   0.00,   7.567318237821570000},
-{50.00,   41.25,  0.0725,   0.00,   0.10,   0.10,   "P",   0.00,   0.000000000029292149},
-{50.00,   41.25,  0.0725,   0.00,   0.10,   0.50,   "P",   0.00,   0.000515507530913631},
-{50.00,   41.25,  0.0725,   0.00,   0.10,   1.00,   "P",   0.00,   0.005477652449141430},
-{50.00,   50.00,  0.0725,   0.00,   0.10,   0.10,   "P",   0.00,   0.464326955833212000},
-{50.00,   50.00,  0.0725,   0.00,   0.10,   0.50,   "P",   0.00,   0.673084962906374000},
-{50.00,   50.00,  0.0725,   0.00,   0.10,   1.00,   "P",   0.00,   0.659791527483823000},
-{50.00,   60.75,  0.0725,   0.00,   0.10,   0.10,   "P",   0.00,   10.311155234923500000},
-{50.00,   60.75,  0.0725,   0.00,   0.10,   0.50,   "P",   0.00,   8.603851369228160000},
-{50.00,   60.75,  0.0725,   0.00,   0.10,   1.00,   "P",   0.00,   6.785977231343880000},
-{50.00,   41.25,  0.0725,   0.00,   0.25,   0.10,   "P",   0.00,   0.006627328205560570},
-{50.00,   41.25,  0.0725,   0.00,   0.25,   0.50,   "P",   0.00,   0.363123693645393000},
-{50.00,   41.25,  0.0725,   0.00,   0.25,   1.00,   "P",   0.00,   0.809411585253518000},
-{50.00,   50.00,  0.0725,   0.00,   0.25,   0.10,   "P",   0.00,   1.396854161786330000},
-{50.00,   50.00,  0.0725,   0.00,   0.25,   0.50,   "P",   0.00,   2.641158169086190000},
-{50.00,   50.00,  0.0725,   0.00,   0.25,   1.00,   "P",   0.00,   3.250826209751760000},
-{50.00,   60.75,  0.0725,   0.00,   0.25,   0.10,   "P",   0.00,   10.324006069186900000},
-{50.00,   60.75,  0.0725,   0.00,   0.25,   0.50,   "P",   0.00,   9.551881537952600000},
-{50.00,   60.75,  0.0725,   0.00,   0.25,   1.00,   "P",   0.00,   9.164714795762360000},
-{50.00,   41.25,  0.0725,   0.00,   0.50,   0.10,   "P",   0.00,   0.351818850677170000},
-{50.00,   41.25,  0.0725,   0.00,   0.50,   0.50,   "P",   0.00,   2.442518350526630000},
-{50.00,   41.25,  0.0725,   0.00,   0.50,   1.00,   "P",   0.00,   4.067644232254740000},
-{50.00,   50.00,  0.0725,   0.00,   0.50,   0.10,   "P",   0.00,   2.961954372418220000},
-{50.00,   50.00,  0.0725,   0.00,   0.50,   0.50,   "P",   0.00,   6.036711654768370000},
-{50.00,   50.00,  0.0725,   0.00,   0.50,   1.00,   "P",   0.00,   7.874969730817450000},
-{50.00,   60.75,  0.0725,   0.00,   0.50,   0.10,   "P",   0.00,   10.811563849235700000},
-{50.00,   60.75,  0.0725,   0.00,   0.50,   0.50,   "P",   0.00,   12.655084420434400000},
-{50.00,   60.75,  0.0725,   0.00,   0.50,   1.00,   "P",   0.00,   14.068812347433500000},
-{100.00,   90.00,  0.0825,   0.00,   0.10,   0.10,   "C",   0.00,   10.739565764427600000},
-{100.00,   90.00,  0.0825,   0.00,   0.10,   0.50,   "C",   0.00,   13.682682955061700000},
-{100.00,   90.00,  0.0825,   0.00,   0.10,   1.00,   "C",   0.00,   17.233234434950200000},
-{100.00,   100.00,  0.0825,   0.00,   0.10,   0.10,   "C",   0.00,   1.709643173779020000},
-{100.00,   100.00,  0.0825,   0.00,   0.10,   0.50,   "C",   0.00,   5.240956408279040000},
-{100.00,   100.00,  0.0825,   0.00,   0.10,   1.00,   "C",   0.00,   9.021567470247120000},
-{100.00,   110.00,  0.0825,   0.00,   0.10,   0.10,   "C",   0.00,   0.002938681227336320},
-{100.00,   110.00,  0.0825,   0.00,   0.10,   0.50,   "C",   0.00,   0.928877789383869000},
-{100.00,   110.00,  0.0825,   0.00,   0.10,   1.00,   "C",   0.00,   3.401688909911660000},
-{100.00,   90.00,  0.0825,   0.00,   0.25,   0.10,   "C",   0.00,   10.991579413464500000},
-{100.00,   90.00,  0.0825,   0.00,   0.25,   0.50,   "C",   0.00,   15.507256193857400000},
-{100.00,   90.00,  0.0825,   0.00,   0.25,   1.00,   "C",   0.00,   20.091308227254800000},
-{100.00,   100.00,  0.0825,   0.00,   0.25,   0.10,   "C",   0.00,   3.568013775180880000},
-{100.00,   100.00,  0.0825,   0.00,   0.25,   0.50,   "C",   0.00,   9.107927694355590000},
-{100.00,   100.00,  0.0825,   0.00,   0.25,   1.00,   "C",   0.00,   14.025694755963400000},
-{100.00,   110.00,  0.0825,   0.00,   0.25,   0.10,   "C",   0.00,   0.564947997341128000},
-{100.00,   110.00,  0.0825,   0.00,   0.25,   0.50,   "C",   0.00,   4.796306777823870000},
-{100.00,   110.00,  0.0825,   0.00,   0.25,   1.00,   "C",   0.00,   9.380215666129900000},
-{100.00,   90.00,  0.0825,   0.00,   0.50,   0.10,   "C",   0.00,   12.803934625179900000},
-{100.00,   90.00,  0.0825,   0.00,   0.50,   0.50,   "C",   0.00,   20.987751407192000000},
-{100.00,   90.00,  0.0825,   0.00,   0.50,   1.00,   "C",   0.00,   27.842982610886100000},
-{100.00,   100.00,  0.0825,   0.00,   0.50,   0.10,   "C",   0.00,   6.694710681788890000},
-{100.00,   100.00,  0.0825,   0.00,   0.50,   0.50,   "C",   0.00,   15.861123252603300000},
-{100.00,   100.00,  0.0825,   0.00,   0.50,   1.00,   "C",   0.00,   23.171055823977000000},
-{100.00,   110.00,  0.0825,   0.00,   0.50,   0.10,   "C",   0.00,   3.011118247238870000},
-{100.00,   110.00,  0.0825,   0.00,   0.50,   0.50,   "C",   0.00,   11.810384819288500000},
-{100.00,   110.00,  0.0825,   0.00,   0.50,   1.00,   "C",   0.00,   19.230265826002600000},
-{100.00,   90.00,  0.0825,   0.00,   0.10,   0.10,   "P",   0.00,   0.000120171536473068},
-{100.00,   90.00,  0.0825,   0.00,   0.10,   0.50,   "P",   0.00,   0.045711194234222000},
-{100.00,   90.00,  0.0825,   0.00,   0.10,   1.00,   "P",   0.00,   0.106263842062639000},
-{100.00,   100.00,  0.0825,   0.00,   0.10,   0.10,   "P",   0.00,   0.888036959455578000},
-{100.00,   100.00,  0.0825,   0.00,   0.10,   0.50,   "P",   0.00,   1.199876674026320000},
-{100.00,   100.00,  0.0825,   0.00,   0.10,   1.00,   "P",   0.00,   1.102711255927580000},
-{100.00,   110.00,  0.0825,   0.00,   0.10,   0.10,   "P",   0.00,   9.099171845471530000},
-{100.00,   110.00,  0.0825,   0.00,   0.10,   0.50,   "P",   0.00,   6.483690081705880000},
-{100.00,   110.00,  0.0825,   0.00,   0.10,   1.00,   "P",   0.00,   4.690947074160150000},
-{100.00,   90.00,  0.0825,   0.00,   0.25,   0.10,   "P",   0.00,   0.252133820573404000},
-{100.00,   90.00,  0.0825,   0.00,   0.25,   0.50,   "P",   0.00,   1.870284433029970000},
-{100.00,   90.00,  0.0825,   0.00,   0.25,   1.00,   "P",   0.00,   2.964337634367170000},
-{100.00,   100.00,  0.0825,   0.00,   0.25,   0.10,   "P",   0.00,   2.746407560857420000},
-{100.00,   100.00,  0.0825,   0.00,   0.25,   0.50,   "P",   0.00,   5.066847960102870000},
-{100.00,   100.00,  0.0825,   0.00,   0.25,   1.00,   "P",   0.00,   6.106838541643810000},
-{100.00,   110.00,  0.0825,   0.00,   0.25,   0.10,   "P",   0.00,   9.661181161585320000},
-{100.00,   110.00,  0.0825,   0.00,   0.25,   0.50,   "P",   0.00,   10.351119070145900000},
-{100.00,   110.00,  0.0825,   0.00,   0.25,   1.00,   "P",   0.00,   10.669473830378400000},
-{100.00,   90.00,  0.0825,   0.00,   0.50,   0.10,   "P",   0.00,   2.064489032288790000},
-{100.00,   90.00,  0.0825,   0.00,   0.50,   0.50,   "P",   0.00,   7.350779646364550000},
-{100.00,   90.00,  0.0825,   0.00,   0.50,   1.00,   "P",   0.00,   10.716012017998500000},
-{100.00,   100.00,  0.0825,   0.00,   0.50,   0.10,   "P",   0.00,   5.873104467465440000},
-{100.00,   100.00,  0.0825,   0.00,   0.50,   0.50,   "P",   0.00,   11.820043518350600000},
-{100.00,   100.00,  0.0825,   0.00,   0.50,   1.00,   "P",   0.00,   15.252199609657500000},
-{100.00,   110.00,  0.0825,   0.00,   0.50,   0.10,   "P",   0.00,   12.107351411483100000},
-{100.00,   110.00,  0.0825,   0.00,   0.50,   0.50,   "P",   0.00,   17.365197111610500000},
-{100.00,   110.00,  0.0825,   0.00,   0.50,   1.00,   "P",   0.00,   20.519523990251100000},
-{50.00,   41.25,  0.0825,   0.00,   0.10,   0.10,   "C",   0.00,   9.088912563432170000},
-{50.00,   41.25,  0.0825,   0.00,   0.10,   0.50,   "C",   0.00,   10.417339221247600000},
-{50.00,   41.25,  0.0825,   0.00,   0.10,   1.00,   "C",   0.00,   12.020458260573200000},
-{50.00,   50.00,  0.0825,   0.00,   0.10,   0.10,   "C",   0.00,   0.854821586889512000},
-{50.00,   50.00,  0.0825,   0.00,   0.10,   0.50,   "C",   0.00,   2.620478204139520000},
-{50.00,   50.00,  0.0825,   0.00,   0.10,   1.00,   "C",   0.00,   4.510783735123560000},
-{50.00,   60.75,  0.0825,   0.00,   0.10,   0.10,   "C",   0.00,   0.000000000509770462},
-{50.00,   60.75,  0.0825,   0.00,   0.10,   0.50,   "C",   0.00,   0.020258714482434300},
-{50.00,   60.75,  0.0825,   0.00,   0.10,   1.00,   "C",   0.00,   0.346802700406624000},
-{50.00,   41.25,  0.0825,   0.00,   0.25,   0.10,   "C",   0.00,   9.095279779656780000},
-{50.00,   41.25,  0.0825,   0.00,   0.25,   0.50,   "C",   0.00,   10.757961410313800000},
-{50.00,   41.25,  0.0825,   0.00,   0.25,   1.00,   "C",   0.00,   12.761066081739600000},
-{50.00,   50.00,  0.0825,   0.00,   0.25,   0.10,   "C",   0.00,   1.784006887590440000},
-{50.00,   50.00,  0.0825,   0.00,   0.25,   0.50,   "C",   0.00,   4.553963847177790000},
-{50.00,   50.00,  0.0825,   0.00,   0.25,   1.00,   "C",   0.00,   7.012847377981680000},
-{50.00,   60.75,  0.0825,   0.00,   0.25,   0.10,   "C",   0.00,   0.013338549021010600},
-{50.00,   60.75,  0.0825,   0.00,   0.25,   0.50,   "C",   0.00,   1.013087068903510000},
-{50.00,   60.75,  0.0825,   0.00,   0.25,   1.00,   "C",   0.00,   2.818536762927260000},
-{50.00,   41.25,  0.0825,   0.00,   0.50,   0.10,   "C",   0.00,   9.435914325176720000},
-{50.00,   41.25,  0.0825,   0.00,   0.50,   0.50,   "C",   0.00,   12.796624953351600000},
-{50.00,   41.25,  0.0825,   0.00,   0.50,   1.00,   "C",   0.00,   15.936815099823400000},
-{50.00,   50.00,  0.0825,   0.00,   0.50,   0.10,   "C",   0.00,   3.347355340894440000},
-{50.00,   50.00,  0.0825,   0.00,   0.50,   0.50,   "C",   0.00,   7.930561626301670000},
-{50.00,   50.00,  0.0825,   0.00,   0.50,   1.00,   "C",   0.00,   11.585527911988500000},
-{50.00,   60.75,  0.0825,   0.00,   0.50,   0.10,   "C",   0.00,   0.506649223493164000},
-{50.00,   60.75,  0.0825,   0.00,   0.50,   0.50,   "C",   0.00,   4.146230216819100000},
-{50.00,   60.75,  0.0825,   0.00,   0.50,   1.00,   "C",   0.00,   7.743859322998950000},
-{50.00,   41.25,  0.0825,   0.00,   0.10,   0.10,   "P",   0.00,   0.000000000023739918},
-{50.00,   41.25,  0.0825,   0.00,   0.10,   0.50,   "P",   0.00,   0.000393830868315673},
-{50.00,   41.25,  0.0825,   0.00,   0.10,   1.00,   "P",   0.00,   0.003930072166366200},
-{50.00,   50.00,  0.0825,   0.00,   0.10,   0.10,   "P",   0.00,   0.444018479727789000},
-{50.00,   50.00,  0.0825,   0.00,   0.10,   0.50,   "P",   0.00,   0.599938337013158000},
-{50.00,   50.00,  0.0825,   0.00,   0.10,   1.00,   "P",   0.00,   0.551355627963788000},
-{50.00,   60.75,  0.0825,   0.00,   0.10,   0.10,   "P",   0.00,   10.250874225308300000},
-{50.00,   60.75,  0.0825,   0.00,   0.10,   0.50,   "P",   0.00,   8.315302775923910000},
-{50.00,   60.75,  0.0825,   0.00,   0.10,   1.00,   "P",   0.00,   6.286097550207500000},
-{50.00,   41.25,  0.0825,   0.00,   0.25,   0.10,   "P",   0.00,   0.006367216248349180},
-{50.00,   41.25,  0.0825,   0.00,   0.25,   0.50,   "P",   0.00,   0.341016019934537000},
-{50.00,   41.25,  0.0825,   0.00,   0.25,   1.00,   "P",   0.00,   0.744537893332813000},
-{50.00,   50.00,  0.0825,   0.00,   0.25,   0.10,   "P",   0.00,   1.373203780428710000},
-{50.00,   50.00,  0.0825,   0.00,   0.25,   0.50,   "P",   0.00,   2.533423980051440000},
-{50.00,   50.00,  0.0825,   0.00,   0.25,   1.00,   "P",   0.00,   3.053419270821910000},
-{50.00,   60.75,  0.0825,   0.00,   0.25,   0.10,   "P",   0.00,   10.264212773819500000},
-{50.00,   60.75,  0.0825,   0.00,   0.25,   0.50,   "P",   0.00,   9.308131130344990000},
-{50.00,   60.75,  0.0825,   0.00,   0.25,   1.00,   "P",   0.00,   8.757831612728140000},
-{50.00,   41.25,  0.0825,   0.00,   0.50,   0.10,   "P",   0.00,   0.347001761768287000},
-{50.00,   41.25,  0.0825,   0.00,   0.50,   0.50,   "P",   0.00,   2.379679562972370000},
-{50.00,   41.25,  0.0825,   0.00,   0.50,   1.00,   "P",   0.00,   3.920286911416630000},
-{50.00,   50.00,  0.0825,   0.00,   0.50,   0.10,   "P",   0.00,   2.936552233732720000},
-{50.00,   50.00,  0.0825,   0.00,   0.50,   0.50,   "P",   0.00,   5.910021759175310000},
-{50.00,   50.00,  0.0825,   0.00,   0.50,   1.00,   "P",   0.00,   7.626099804828730000},
-{50.00,   60.75,  0.0825,   0.00,   0.50,   0.10,   "P",   0.00,   10.757523448291700000},
-{50.00,   60.75,  0.0825,   0.00,   0.50,   0.50,   "P",   0.00,   12.441274278260600000},
-{50.00,   60.75,  0.0825,   0.00,   0.50,   1.00,   "P",   0.00,   13.683154172799800000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.05,   "C",   0.00,   10.123665331672000000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.15,   "C",   0.00,   10.373032852188900000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.25,   "C",   0.00,   10.636947537285500000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.35,   "C",   0.00,   10.917165299126100000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.40,   "C",   0.00,   11.061557599916400000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.75,   "C",   0.00,   12.101053829939600000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.05,   "C",   0.00,   0.961818366406236000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.15,   "C",   0.00,   1.756378640433290000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.25,   "C",   0.00,   2.348994210822140000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.35,   "C",   0.00,   2.858468103310000000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.40,   "C",   0.00,   3.093733002160350000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.75,   "C",   0.00,   4.535722066606680000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.05,   "C",   0.00,   0.000006723584199279},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.15,   "C",   0.00,   0.012638573288007100},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.25,   "C",   0.00,   0.080669824623617900},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.35,   "C",   0.00,   0.203313366122133000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.40,   "C",   0.00,   0.279741513989867000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.75,   "C",   0.00,   0.966244057205561000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.05,   "C",   0.00,   10.180826153638800000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.15,   "C",   0.00,   10.961715417709400000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   11.806688555076800000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.35,   "C",   0.00,   12.605623650271500000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.40,   "C",   0.00,   12.985712061767300000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.75,   "C",   0.00,   15.357169521085200000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.05,   "C",   0.00,   2.297712420609210000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.15,   "C",   0.00,   4.062608172250370000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   5.316534629514670000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.35,   "C",   0.00,   6.358166104399040000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.40,   "C",   0.00,   6.828913330585190000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.75,   "C",   0.00,   9.591743416200030000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.05,   "C",   0.00,   0.112351670775873000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.15,   "C",   0.00,   0.941524462753784000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   1.841160573457080000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.35,   "C",   0.00,   2.688576689404750000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.40,   "C",   0.00,   3.091204880502100000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.75,   "C",   0.00,   5.602711897085350000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.05,   "C",   0.00,   11.084709241234900000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.15,   "C",   0.00,   13.632481055133100000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.25,   "C",   0.00,   15.655476595132900000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.35,   "C",   0.00,   17.372974698382700000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.40,   "C",   0.00,   18.152722902532300000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.75,   "C",   0.00,   22.710977121510300000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.05,   "C",   0.00,   4.523973730175930000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.15,   "C",   0.00,   7.905126847046370000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.25,   "C",   0.00,   10.259870456479600000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.35,   "C",   0.00,   12.186764904701600000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.40,   "C",   0.00,   13.049054347704600000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.75,   "C",   0.00,   18.005360351008900000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.05,   "C",   0.00,   1.310314250402410000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.15,   "C",   0.00,   4.184313321977850000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.25,   "C",   0.00,   6.424957663250310000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.35,   "C",   0.00,   8.318451201213970000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.40,   "C",   0.00,   9.176764345625750000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.75,   "C",   0.00,   14.187966555535700000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.05,   "P",   0.00,   0.000000370816316441},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.15,   "P",   0.00,   0.002547503556924290},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.25,   "P",   0.00,   0.020319624509017900},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.35,   "P",   0.00,   0.055070784382573900},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.40,   "P",   0.00,   0.076982689699630000},
-{100.00,   90.00,  0.0275,   0.00,   0.10,   0.75,   "P",   0.00,   0.263815478639822000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.05,   "P",   0.00,   0.824412854344306000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.15,   "P",   0.00,   1.344728253064450000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.25,   "P",   0.00,   1.663852085514990000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.35,   "P",   0.00,   1.900585309150540000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.40,   "P",   0.00,   1.999760879697220000},
-{100.00,   100.00,  0.0275,   0.00,   0.10,   0.75,   "P",   0.00,   2.494346120718070000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.05,   "P",   0.00,   9.848860660316070000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.15,   "P",   0.00,   9.559823147182290000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.25,   "P",   0.00,   9.327013486785750000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.35,   "P",   0.00,   9.149642292546710000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.40,   "P",   0.00,   9.076372179280420000},
-{100.00,   110.00,  0.0275,   0.00,   0.10,   0.75,   "P",   0.00,   8.720730516728090000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.05,   "P",   0.00,   0.057161192783076400},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.15,   "P",   0.00,   0.591230069077490000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   1.190060642300400000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.35,   "P",   0.00,   1.743529135528020000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.40,   "P",   0.00,   2.001137151550470000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.75,   "P",   0.00,   3.519931169785430000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.05,   "P",   0.00,   2.160306908547280000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.15,   "P",   0.00,   3.650957784881540000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   4.631392504207520000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.35,   "P",   0.00,   5.400283310239590000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.40,   "P",   0.00,   5.734941208122060000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.75,   "P",   0.00,   7.550367470311420000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.05,   "P",   0.00,   9.961205607507750000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.15,   "P",   0.00,   10.488709036648100000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   11.087504235619200000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.35,   "P",   0.00,   11.634905615829300000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.40,   "P",   0.00,   11.887835545792700000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.75,   "P",   0.00,   13.357198356607900000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.05,   "P",   0.00,   0.961044280379137000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.15,   "P",   0.00,   3.261995706501170000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.25,   "P",   0.00,   5.038848682356440000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.35,   "P",   0.00,   6.510880183639170000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.40,   "P",   0.00,   7.168147992315500000},
-{100.00,   90.00,  0.0275,   0.00,   0.50,   0.75,   "P",   0.00,   10.873738770210500000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.05,   "P",   0.00,   4.386568218113990000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.15,   "P",   0.00,   7.493476459677530000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.25,   "P",   0.00,   9.574728331172470000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.35,   "P",   0.00,   11.228882110542100000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.40,   "P",   0.00,   11.955082225241500000},
-{100.00,   100.00,  0.0275,   0.00,   0.50,   0.75,   "P",   0.00,   15.963984405120300000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.05,   "P",   0.00,   11.159168187134300000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.15,   "P",   0.00,   13.731497895872100000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.25,   "P",   0.00,   15.671301325412400000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.35,   "P",   0.00,   17.264780127638500000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.40,   "P",   0.00,   17.973395010916300000},
-{100.00,   110.00,  0.0275,   0.00,   0.50,   0.75,   "P",   0.00,   21.942453015058200000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.05,   "C",   0.00,   8.806679773725550000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.15,   "C",   0.00,   8.919805847440340000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.25,   "C",   0.00,   9.032638359465810000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.35,   "C",   0.00,   9.145345404131990000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.40,   "C",   0.00,   9.201762221631910000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.75,   "C",   0.00,   9.600898793029730000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.05,   "C",   0.00,   0.480909183203118000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.15,   "C",   0.00,   0.878189320216645000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.25,   "C",   0.00,   1.174497105411070000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.35,   "C",   0.00,   1.429234051655000000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.40,   "C",   0.00,   1.546866501080180000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.75,   "C",   0.00,   2.267861033303340000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.05,   "C",   0.00,   0.000000000000000000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.15,   "C",   0.00,   0.000000171615412703},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.25,   "C",   0.00,   0.000055860184325600},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.35,   "C",   0.00,   0.000779365099622839},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.40,   "C",   0.00,   0.001842470055799290},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.75,   "C",   0.00,   0.038961694259698300},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.05,   "C",   0.00,   8.806849354517480000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.15,   "C",   0.00,   8.954197588651610000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   9.165798615967480000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.35,   "C",   0.00,   9.408822105130160000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.40,   "C",   0.00,   9.535303750088810000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.75,   "C",   0.00,   10.425117157574200000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.05,   "C",   0.00,   1.148856210304600000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.15,   "C",   0.00,   2.031304086125190000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   2.658267314757330000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.35,   "C",   0.00,   3.179083052199520000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.40,   "C",   0.00,   3.414456665292590000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.75,   "C",   0.00,   4.795871708100020000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.05,   "C",   0.00,   0.000211358987727573},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.15,   "C",   0.00,   0.049106845262957000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   0.199576273789990000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.35,   "C",   0.00,   0.408212274950217000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.40,   "C",   0.00,   0.524134867759744000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.75,   "C",   0.00,   1.404244627370240000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.05,   "C",   0.00,   8.892181952988650000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.15,   "C",   0.00,   9.628643279189300000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.25,   "C",   0.00,   10.393689811168400000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.35,   "C",   0.00,   11.099336802885700000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.40,   "C",   0.00,   11.430472829888300000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.75,   "C",   0.00,   13.444734990729800000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.05,   "C",   0.00,   2.261986865087960000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.15,   "C",   0.00,   3.952563423523180000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.25,   "C",   0.00,   5.129935228239810000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.35,   "C",   0.00,   6.093382452350780000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.40,   "C",   0.00,   6.524527173852300000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.75,   "C",   0.00,   9.002680175504460000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.05,   "C",   0.00,   0.104628872651218000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.15,   "C",   0.00,   0.911420373042769000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.25,   "C",   0.00,   1.788383179217750000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.35,   "C",   0.00,   2.607959513092190000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.40,   "C",   0.00,   2.994691865020780000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.75,   "C",   0.00,   5.365218152828680000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.05,   "P",   0.00,   0.000000000000000000},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.15,   "P",   0.00,   0.000000062650696723},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.25,   "P",   0.00,   0.000017232776604701},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.35,   "P",   0.00,   0.000218751541208349},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.40,   "P",   0.00,   0.000498721115871775},
-{50.00,   41.25,  0.0275,   0.00,   0.10,   0.75,   "P",   0.00,   0.008831215350675280},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.05,   "P",   0.00,   0.412206427172153000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.15,   "P",   0.00,   0.672364126532227000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.25,   "P",   0.00,   0.831926042757495000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.35,   "P",   0.00,   0.950292654575268000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.40,   "P",   0.00,   0.999880439848609000},
-{50.00,   50.00,  0.0275,   0.00,   0.10,   0.75,   "P",   0.00,   1.247173060359030000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.05,   "P",   0.00,   10.666526151422400000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.15,   "P",   0.00,   10.499922561288800000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.25,   "P",   0.00,   10.333832019060200000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.35,   "P",   0.00,   10.168865567647700000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.40,   "P",   0.00,   10.087254405659400000},
-{50.00,   60.75,  0.0275,   0.00,   0.10,   0.75,   "P",   0.00,   9.548825807132360000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.05,   "P",   0.00,   0.000169580791934694},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.15,   "P",   0.00,   0.034391803861966800},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   0.133177489278275000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.35,   "P",   0.00,   0.263695452539379000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.40,   "P",   0.00,   0.334040249572767000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.75,   "P",   0.00,   0.833049579895138000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.05,   "P",   0.00,   1.080153454273640000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.15,   "P",   0.00,   1.825478892440770000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   2.315696252103760000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.35,   "P",   0.00,   2.700141655119790000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.40,   "P",   0.00,   2.867470604061030000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.75,   "P",   0.00,   3.775183735155710000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.05,   "P",   0.00,   10.666737510410100000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.15,   "P",   0.00,   10.549029234936400000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   10.533352432665900000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.35,   "P",   0.00,   10.576298477498300000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.40,   "P",   0.00,   10.609546803363400000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.75,   "P",   0.00,   10.914108740242900000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.05,   "P",   0.00,   0.085502179263094900},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.15,   "P",   0.00,   0.708837494399656000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.25,   "P",   0.00,   1.361068684479170000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.35,   "P",   0.00,   1.954210150294910000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.40,   "P",   0.00,   2.229209329372280000},
-{50.00,   41.25,  0.0275,   0.00,   0.50,   0.75,   "P",   0.00,   3.852667413050720000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.05,   "P",   0.00,   2.193284109057000000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.15,   "P",   0.00,   3.746738229838770000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.25,   "P",   0.00,   4.787364165586240000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.35,   "P",   0.00,   5.614441055271050000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.40,   "P",   0.00,   5.977541112620740000},
-{50.00,   50.00,  0.0275,   0.00,   0.50,   0.75,   "P",   0.00,   7.981992202560150000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.05,   "P",   0.00,   10.771155024073600000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.15,   "P",   0.00,   11.411342762716200000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.25,   "P",   0.00,   12.122159338093700000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.35,   "P",   0.00,   12.776045715640300000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.40,   "P",   0.00,   13.080103800624400000},
-{50.00,   60.75,  0.0275,   0.00,   0.50,   0.75,   "P",   0.00,   14.875082265701300000},
-{100.00,   90.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   10.123664960855700000},
-{100.00,   90.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   10.433739898891000000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   11.806688555076800000},
-{100.00,   90.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   14.395707640825200000},
-{100.00,   90.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   17.061100221173400000},
-{100.00,   90.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   27.276574478179500000},
-{100.00,   100.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.517790662421029000},
-{100.00,   100.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   2.524199969313780000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   5.316534629514670000},
-{100.00,   100.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   8.694162162838850000},
-{100.00,   100.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   11.809330726608000000},
-{100.00,   100.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   22.972890772584900000},
-{100.00,   110.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.000000000000000003},
-{100.00,   110.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   0.151725311664208000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   1.841160573457080000},
-{100.00,   110.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   4.865673300084870000},
-{100.00,   110.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   7.926036867545800000},
-{100.00,   110.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   19.343153241896800000},
-{100.00,   90.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   10.123664960855700000},
-{100.00,   90.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   10.433739898891000000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   11.806688555076800000},
-{100.00,   90.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   14.395707640825200000},
-{100.00,   90.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   17.061100221173400000},
-{100.00,   90.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   27.276574478179500000},
-{100.00,   100.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.517790662421029000},
-{100.00,   100.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   2.524199969313780000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   5.316534629514670000},
-{100.00,   100.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   8.694162162838850000},
-{100.00,   100.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   11.809330726608000000},
-{100.00,   100.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   22.972890772584900000},
-{100.00,   110.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.000000000000000003},
-{100.00,   110.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   0.151725311664208000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   1.841160573457080000},
-{100.00,   110.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   4.865673300084870000},
-{100.00,   110.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   7.926036867545800000},
-{100.00,   110.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   19.343153241896800000},
-{100.00,   90.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   10.123664960855700000},
-{100.00,   90.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   10.433739898891000000},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   11.806688555076800000},
-{100.00,   90.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   14.395707640825200000},
-{100.00,   90.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   17.061100221173400000},
-{100.00,   90.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   27.276574478179500000},
-{100.00,   100.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.517790662421029000},
-{100.00,   100.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   2.524199969313780000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   5.316534629514670000},
-{100.00,   100.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   8.694162162838850000},
-{100.00,   100.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   11.809330726608000000},
-{100.00,   100.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   22.972890772584900000},
-{100.00,   110.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.000000000000000003},
-{100.00,   110.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   0.151725311664208000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   1.841160573457080000},
-{100.00,   110.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   4.865673300084870000},
-{100.00,   110.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   7.926036867545800000},
-{100.00,   110.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   19.343153241896800000},
-{100.00,   90.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.000000000000000000},
-{100.00,   90.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   0.063254550259028900},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   1.190060642300400000},
-{100.00,   90.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   3.533613126081700000},
-{100.00,   90.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   6.076525310956530000},
-{100.00,   90.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   15.439336126879800000},
-{100.00,   100.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.380385150359093000},
-{100.00,   100.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   2.112549581944940000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   4.631392504207520000},
-{100.00,   100.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   7.736279368679390000},
-{100.00,   100.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   10.715358604144900000},
-{100.00,   100.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   20.931514826696300000},
-{100.00,   110.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   9.848853936731870000},
-{100.00,   110.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   9.698909885558490000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   11.087504235619200000},
-{100.00,   110.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   13.812002226509500000},
-{100.00,   110.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   16.722667532836400000},
-{100.00,   110.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   27.097639701419300000},
-{100.00,   90.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.000000000000000000},
-{100.00,   90.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   0.063254550259028900},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   1.190060642300400000},
-{100.00,   90.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   3.533613126081700000},
-{100.00,   90.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   6.076525310956530000},
-{100.00,   90.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   15.439336126879800000},
-{100.00,   100.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.380385150359093000},
-{100.00,   100.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   2.112549581944940000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   4.631392504207520000},
-{100.00,   100.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   7.736279368679390000},
-{100.00,   100.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   10.715358604144900000},
-{100.00,   100.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   20.931514826696300000},
-{100.00,   110.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   9.848853936731870000},
-{100.00,   110.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   9.698909885558490000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   11.087504235619200000},
-{100.00,   110.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   13.812002226509500000},
-{100.00,   110.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   16.722667532836400000},
-{100.00,   110.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   27.097639701419300000},
-{100.00,   90.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.000000000000000000},
-{100.00,   90.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   0.063254550259028900},
-{100.00,   90.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   1.190060642300400000},
-{100.00,   90.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   3.533613126081700000},
-{100.00,   90.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   6.076525310956530000},
-{100.00,   90.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   15.439336126879800000},
-{100.00,   100.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.380385150359093000},
-{100.00,   100.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   2.112549581944940000},
-{100.00,   100.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   4.631392504207520000},
-{100.00,   100.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   7.736279368679390000},
-{100.00,   100.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   10.715358604144900000},
-{100.00,   100.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   20.931514826696300000},
-{100.00,   110.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   9.848853936731870000},
-{100.00,   110.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   9.698909885558490000},
-{100.00,   110.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   11.087504235619200000},
-{100.00,   110.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   13.812002226509500000},
-{100.00,   110.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   16.722667532836400000},
-{100.00,   110.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   27.097639701419300000},
-{50.00,   41.25,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   8.806679773725550000},
-{50.00,   41.25,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   8.920049748791770000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   9.165798615967480000},
-{50.00,   41.25,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   9.959094645483170000},
-{50.00,   41.25,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   10.982693660754800000},
-{50.00,   41.25,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   15.502116628943400000},
-{50.00,   50.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.258895331210514000},
-{50.00,   50.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   1.262099984656890000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   2.658267314757330000},
-{50.00,   50.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   4.347081081419420000},
-{50.00,   50.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   5.904665363304020000},
-{50.00,   50.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   11.486445386292500000},
-{50.00,   60.75,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.000000000000000000},
-{50.00,   60.75,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   0.000436135893052522},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   0.199576273789990000},
-{50.00,   60.75,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   1.149382650832590000},
-{50.00,   60.75,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   2.427873749477470000},
-{50.00,   60.75,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   7.940172715926700000},
-{50.00,   41.25,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   8.806679773725550000},
-{50.00,   41.25,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   8.920049748791770000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   9.165798615967480000},
-{50.00,   41.25,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   9.959094645483170000},
-{50.00,   41.25,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   10.982693660754800000},
-{50.00,   41.25,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   15.502116628943400000},
-{50.00,   50.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.258895331210514000},
-{50.00,   50.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   1.262099984656890000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   2.658267314757330000},
-{50.00,   50.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   4.347081081419420000},
-{50.00,   50.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   5.904665363304020000},
-{50.00,   50.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   11.486445386292500000},
-{50.00,   60.75,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.000000000000000000},
-{50.00,   60.75,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   0.000436135893052522},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   0.199576273789990000},
-{50.00,   60.75,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   1.149382650832590000},
-{50.00,   60.75,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   2.427873749477470000},
-{50.00,   60.75,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   7.940172715926700000},
-{50.00,   41.25,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   8.806679773725550000},
-{50.00,   41.25,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   8.920049748791770000},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   9.165798615967480000},
-{50.00,   41.25,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   9.959094645483170000},
-{50.00,   41.25,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   10.982693660754800000},
-{50.00,   41.25,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   15.502116628943400000},
-{50.00,   50.00,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.258895331210514000},
-{50.00,   50.00,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   1.262099984656890000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   2.658267314757330000},
-{50.00,   50.00,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   4.347081081419420000},
-{50.00,   50.00,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   5.904665363304020000},
-{50.00,   50.00,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   11.486445386292500000},
-{50.00,   60.75,  0.0275,   0.00,   0.05,   0.05,   "C",   0.00,   0.000000000000000000},
-{50.00,   60.75,  0.0275,   0.00,   0.15,   0.15,   "C",   0.00,   0.000436135893052522},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "C",   0.00,   0.199576273789990000},
-{50.00,   60.75,  0.0275,   0.00,   0.35,   0.35,   "C",   0.00,   1.149382650832590000},
-{50.00,   60.75,  0.0275,   0.00,   0.45,   0.40,   "C",   0.00,   2.427873749477470000},
-{50.00,   60.75,  0.0275,   0.00,   0.65,   0.75,   "C",   0.00,   7.940172715926700000},
-{50.00,   41.25,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.000000000000000000},
-{50.00,   41.25,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   0.000243964002132480},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   0.133177489278275000},
-{50.00,   41.25,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   0.813967992892385000},
-{50.00,   41.25,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   1.781430160238800000},
-{50.00,   41.25,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   5.910049051264370000},
-{50.00,   50.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.190192575179547000},
-{50.00,   50.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   1.056274790972470000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   2.315696252103760000},
-{50.00,   50.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   3.868139684339690000},
-{50.00,   50.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   5.357679302072460000},
-{50.00,   50.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   10.465757413348100000},
-{50.00,   60.75,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   10.666526151422400000},
-{50.00,   60.75,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   10.500358525566500000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   10.533352432665900000},
-{50.00,   60.75,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   11.317468853380700000},
-{50.00,   60.75,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   12.513285685081100000},
-{50.00,   60.75,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   17.450036828799400000},
-{50.00,   41.25,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.000000000000000000},
-{50.00,   41.25,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   0.000243964002132480},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   0.133177489278275000},
-{50.00,   41.25,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   0.813967992892385000},
-{50.00,   41.25,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   1.781430160238800000},
-{50.00,   41.25,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   5.910049051264370000},
-{50.00,   50.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.190192575179547000},
-{50.00,   50.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   1.056274790972470000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   2.315696252103760000},
-{50.00,   50.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   3.868139684339690000},
-{50.00,   50.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   5.357679302072460000},
-{50.00,   50.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   10.465757413348100000},
-{50.00,   60.75,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   10.666526151422400000},
-{50.00,   60.75,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   10.500358525566500000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   10.533352432665900000},
-{50.00,   60.75,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   11.317468853380700000},
-{50.00,   60.75,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   12.513285685081100000},
-{50.00,   60.75,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   17.450036828799400000},
-{50.00,   41.25,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.000000000000000000},
-{50.00,   41.25,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   0.000243964002132480},
-{50.00,   41.25,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   0.133177489278275000},
-{50.00,   41.25,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   0.813967992892385000},
-{50.00,   41.25,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   1.781430160238800000},
-{50.00,   41.25,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   5.910049051264370000},
-{50.00,   50.00,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   0.190192575179547000},
-{50.00,   50.00,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   1.056274790972470000},
-{50.00,   50.00,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   2.315696252103760000},
-{50.00,   50.00,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   3.868139684339690000},
-{50.00,   50.00,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   5.357679302072460000},
-{50.00,   50.00,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   10.465757413348100000},
-{50.00,   60.75,  0.0275,   0.00,   0.05,   0.05,   "P",   0.00,   10.666526151422400000},
-{50.00,   60.75,  0.0275,   0.00,   0.15,   0.15,   "P",   0.00,   10.500358525566500000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   10.533352432665900000},
-{50.00,   60.75,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   11.317468853380700000},
-{50.00,   60.75,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   12.513285685081100000},
-{50.00,   60.75,  0.0275,   0.00,   0.65,   0.75,   "P",   0.00,   17.450036828799400000},
-{50.00,   60.75,  0.0275,   0.00,   0.25,   0.25,   "P",   0.00,   10.533352432665900000},
-{50.00,   60.75,  0.0275,   0.00,   0.35,   0.35,   "P",   0.00,   11.317468853380700000},
-{50.00,   60.75,  0.0275,   0.00,   0.45,   0.40,   "P",   0.00,   12.513285685081100000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   0.50,   "C",   0.00,   5.123575416865320000},
-{100.00,   110.00,  0.1000,   0.00,   0.25,   1.00,   "C",   0.00,   10.160055944516600000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   12.919509619564700000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   21.438280655724400000},
-{100.00,   90.00,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   28.643647264488200000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   6.779936664291260000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   16.263193147074300000},
-{100.00,   100.00,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   23.926745214162700000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   0.10,   "C",   0.00,   3.061909566605540000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   0.50,   "C",   0.00,   12.155688815568700000},
-{100.00,   110.00,  0.1000,   0.00,   0.50,   1.00,   "C",   0.00,   19.929858372066300000},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   0.000095752219082624},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   0.032219033907538300},
-{100.00,   90.00,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   0.066226743903883000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   0.819967493295226000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   0.973216054356396000},
-{100.00,   100.00,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   0.791889047262800000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   0.10,   "P",   0.00,   8.909004787274070000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   0.50,   "P",   0.00,   5.775959538905960000},
-{100.00,   110.00,  0.1000,   0.00,   0.10,   1.00,   "P",   0.00,   3.748863004264400000},
